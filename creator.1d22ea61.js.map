{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCQA,EAAA,MAAA,CAAA,EAAA,iBAAA,IAAgB,GARhB,IAAA,EAAA,EAAA,oCACA,EAAA,EAAA,wCAEA,EAAA,EAAA,cACA,EAAA,iBACA,IAAA,EAAA,EAAA,qBACA,EAAA,EAAA,oBAEO,SAAS,IACZ,IAAI,EAAQ,EAAE,CACV,EAAc,EAAE,CAChB,EAAmB,EAAE,CAMrB,EAHO,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,EAAG,IAAM,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,EAAG,IAK3F,EAAO,AAAA,CAAA,EAAA,EAAA,aAAa,AAAb,EAAc,UAAW,UAAW,mBAC3C,EAAU,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EAAc,MAAO,oBAE/B,EAAQ,AAAA,CAAA,EAAA,EAAA,aAAa,AAAb,EAAc,KAAM,iBAAkB,iBACpD,CAAA,EAAM,SAAS,CAA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,MAAM,GAClF,EAAU,SAAS,CAAC,MAAM,CAAC,OAEnC,GAEO,CAAC,UAAA,EAAW,WAAA,EAAY,eA7F/B,WACI,OAAO,CACX,EA2F+C,eAAA,CAAc,CACjE,CAjJA,EAAA,kB,E,C,a,Q,qB,Q,kB,Q,iD,O,E,C,M,C,W,E,C,E,C,M,C,W,E,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,G,I,E,E,qB,E,S,C,E,E,E,C,oB,Q,iD,O,E,C,Q,C,S,C,C,C,C,C,E,IIqFY,EMfA,ENeA,EMfA,E,E,E,kD,E,iB,C,G,E,M,C,E,e,I,G,E,M,C,E,mB,I,G,E,M,C,E,e,I,G,E,M,C,E,W,I,G,E,M,C,E,Y,I,G,E,M,C,E,a,I,I,E,M,C,E,a,I,I,E,M,C,E,c,I,I,E,M,C,E,kB,I,G,E,M,C,E,Y,I,I,E,M,C,E,mB,I,G,E,M,C,E,wB,I,G,E,M,C,E,yB,I,I,E,M,C,E,e,I,I,E,M,C,E,U,I,I,E,M,C,E,W,I,I,E,M,C,E,iB,I,I,E,M,C,E,c,I,I,E,M,C,E,a,I,I,E,M,C,E,Y,I,I,E,M,C,E,O,I,I,E,M,C,E,U,I,I,E,M,C,E,M,I,I,E,M,C,E,iB,I,I,E,M,C,E,c,I,I,E,M,C,E,uB,I,I,E,M,C,E,e,I,I,I,E,E,iB,E,E,kB,E,E,sBPxEZ;;;;;;;;;;;;;;;CAeG,EAQI,IAAM,EAAe,iCAKf,EAA4B,eC5BzC;;;;;;;;;;;;;;;CAeG,EAUG,MAAO,UAAqB,EAAA,aAAa,CAa7C,YAAY,CAAsB,CAAE,CAAe,CAAU,EAAU,CAAC,CAAA,CACtE,KAAK,CACH,EAAY,GACZ,CAAA,kBAAA,EAAqB,EAAO,EAAA,EAAK,EAAY,GAAK,CAAA,CAAG,EAHI,IAAO,CAAA,OAAA,CAAP,EAR7D,IAAA,CAAA,UAAU,CAAsC,CAAE,eAAgB,IAAI,EAapE,IAAI,CAAC,YAAY,CAAG,IAAI,CAAC,OAAO,CAGhC,OAAO,cAAc,CAAC,IAAI,CAAE,EAAa,SAAS,CACnD,CAED,IAAI,QAAM,CACR,OAAO,IAAI,CAAC,OAAO,AACpB,CAED,IAAI,OAAO,CAAc,CAAA,CACvB,IAAI,CAAC,OAAO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","sources":["<anon>","src/js/pages/creator/creator.js","src/js/components/tagsLabel/tagsLabel.js","node_modules/firebase/storage/dist/esm/index.esm.js","node_modules/@firebase/storage/dist/index.esm2017.js","node_modules/@firebase/storage/src/implementation/constants.ts","node_modules/@firebase/storage/src/implementation/error.ts","node_modules/@firebase/storage/src/implementation/location.ts","node_modules/@firebase/storage/src/implementation/failrequest.ts","node_modules/@firebase/storage/src/implementation/backoff.ts","node_modules/@firebase/storage/src/implementation/type.ts","node_modules/@firebase/storage/src/implementation/url.ts","node_modules/@firebase/storage/src/implementation/connection.ts","node_modules/@firebase/storage/src/implementation/utils.ts","node_modules/@firebase/storage/src/implementation/request.ts","node_modules/@firebase/storage/src/implementation/fs.ts","node_modules/@firebase/storage/src/platform/browser/base64.ts","node_modules/@firebase/storage/src/implementation/string.ts","node_modules/@firebase/storage/src/implementation/blob.ts","node_modules/@firebase/storage/src/implementation/json.ts","node_modules/@firebase/storage/src/implementation/path.ts","node_modules/@firebase/storage/src/implementation/metadata.ts","node_modules/@firebase/storage/src/implementation/list.ts","node_modules/@firebase/storage/src/implementation/requestinfo.ts","node_modules/@firebase/storage/src/implementation/requests.ts","node_modules/@firebase/storage/src/implementation/taskenums.ts","node_modules/@firebase/storage/src/implementation/observer.ts","node_modules/@firebase/storage/src/implementation/async.ts","node_modules/@firebase/storage/src/platform/browser/connection.ts","node_modules/@firebase/storage/src/task.ts","node_modules/@firebase/storage/src/reference.ts","node_modules/@firebase/storage/src/service.ts","node_modules/@firebase/storage/src/constants.ts","node_modules/@firebase/storage/src/api.ts","node_modules/@firebase/storage/src/api.browser.ts","node_modules/@firebase/storage/src/index.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"9lokZ\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"getCreatorPage\", ()=>getCreatorPage);\nvar _element = require(\"../../components/element/element\");\nvar _tagsLabel = require(\"../../components/tagsLabel/tagsLabel\");\nvar _main = require(\"../../main\");\nvar _creatorCss = require(\"./creator.css\");\nvar _database = require(\"firebase/database\");\nvar _storage = require(\"firebase/storage\");\nfunction getCreatorPage() {\n    let Files = [];\n    let FileReaders = [];\n    let imagesLinksArray = [];\n    const randomId = ()=>{\n        return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    };\n    let currentId = randomId();\n    const page = (0, _element.createElement)(\"section\", \"creator\", \"section-padding\");\n    const chapter = (0, _element.createElement)(\"div\", \"creator__chapter\");\n    const title = (0, _element.createElement)(\"h3\", \"section__title\", \"creator__title\");\n    title.innerText = \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043C\\u0435\\u043C\";\n    const descr = (0, _element.createElement)(\"p\", \"creator__descr\");\n    descr.innerText = \"\\u0417\\u0434\\u0435\\u0441\\u044C \\u043C\\u043E\\u0436\\u043D\\u043E \\u0441\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0441\\u0432\\u043E\\u0439 \\u043C\\u0435\\u043C!\";\n    const form = (0, _element.createElement)(\"form\", \"creator__form\");\n    const titleLabel = (0, _element.createElement)(\"label\", \"creator__label\");\n    titleLabel.innerText = \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043C\\u0435\\u043C\\u0430\";\n    const titleInput = (0, _element.createElement)(\"input\", \"creator__input\", \"creator__input--name\");\n    titleInput.required = \"required\";\n    const authorLabel = (0, _element.createElement)(\"label\", \"creator__label\");\n    authorLabel.innerText = \"\\u041D\\u0438\\u043A \\u0430\\u0432\\u0442\\u043E\\u0440\\u0430\";\n    const authorInput = (0, _element.createElement)(\"input\", \"creator__input\", \"creator__input--author\");\n    authorInput.value = (0, _main.getUserName)();\n    authorInput.setAttribute(\"readonly\", \"true\");\n    const textLabel = (0, _element.createElement)(\"label\", \"creator__label\");\n    textLabel.innerText = \"\\u0422\\u0435\\u043A\\u0441\\u0442\";\n    const textInput = (0, _element.createElement)(\"textarea\", \"creator__input\", \"creator__input--text\");\n    const imagesBlock = (0, _element.createElement)(\"div\", \"images__block\");\n    const imagesDiv = (0, _element.createElement)(\"div\", \"images__div\");\n    const chooseImage = (0, _element.createElement)(\"button\", \"creator__choose\", \"btn\");\n    chooseImage.type = \"button\";\n    const laodLab = (0, _element.createElement)(\"label\", \"creator__loading\");\n    const progressText = (0, _element.createElement)(\"div\", \"images__progress\");\n    const tagsEl = (0, _tagsLabel.getTagsLabel)();\n    function getProgress() {\n        progressText.innerText = `\\u{414}\\u{43E}\\u{431}\\u{430}\\u{432}\\u{43B}\\u{435}\\u{43D}\\u{43E} \\u{43A}\\u{430}\\u{440}\\u{442}\\u{438}\\u{43D}\\u{43E}\\u{43A}: ${Files.length}/10`;\n    }\n    chooseImage.innerText = \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043A\\u0430\\u0440\\u0438\\u043D\\u043A\\u0443\";\n    const submitBtn = (0, _element.createElement)(\"button\", \"creator__submit\", \"btn\");\n    submitBtn.type = \"submit\";\n    submitBtn.innerText = \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C\";\n    if (imagesDiv.innerHTML === \"\") imagesDiv.innerHTML = \"\\u041A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0438\";\n    titleLabel.append(titleInput);\n    authorLabel.append(authorInput);\n    textLabel.append(textInput);\n    imagesBlock.append(imagesDiv, laodLab, progressText, chooseImage);\n    form.append(titleLabel, authorLabel, textLabel, tagsEl.tagsLabel, imagesBlock, submitBtn);\n    chapter.append(title, descr);\n    chooseImage.addEventListener(\"click\", function(event) {\n        event.preventDefault();\n        openFileDialog();\n    });\n    function openFileDialog() {\n        let input = document.createElement(\"input\");\n        input.type = \"file\";\n        // input.multiple = 'multiple';\n        input.onchange = (e)=>{\n            assignImgsToFilesArray(e.target.files);\n            createImgTags();\n        };\n        input.click();\n    }\n    function assignImgsToFilesArray(thisFiles) {\n        let num = Files.length + thisFiles.length;\n        let loopLim = num <= 10 ? thisFiles.length : 10 - Files.length;\n        for(let i = 0; i < loopLim; i++)Files.push(thisFiles[i]);\n        if (num > 10) alert(\"!!!\");\n        getProgress();\n    }\n    function createImgTags() {\n        imagesDiv.innerHTML = \"\";\n        for(let i = 0; i < Files.length; i++)(function(index) {\n            FileReaders[index] = new FileReader();\n            FileReaders[index].onload = function() {\n                let img = document.createElement(\"img\");\n                img.id = `img-${index}`;\n                img.classList.add(\"choose__img\");\n                img.src = FileReaders[index].result;\n                imagesDiv.append(img);\n            };\n            FileReaders[index].readAsDataURL(Files[index]);\n        })(i);\n        let lab = document.createElement(\"label\");\n        lab.innerHTML = \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C\";\n        lab.style = \"cursor:pointer;display:block; color: navy; font-size: 12px;\";\n        lab.addEventListener(\"click\", clearImage);\n        imagesDiv.append(lab);\n    }\n    function clearImage() {\n        Files = [];\n        imagesLinksArray = [];\n        imagesDiv.innerHTML = \"\\u041A\\u0430\\u0440\\u0442\\u0438\\u043A\\u0438\";\n        getProgress();\n    }\n    function getImgUploadProgress() {\n        return \"Imgs upload \" + imagesLinksArray.length + \" of \" + Files.length;\n    }\n    function isAllImagesUpload() {\n        return imagesLinksArray.length == Files.length;\n    }\n    function uploadAllImages() {\n        imagesLinksArray = [];\n        for(let i = 0; i < Files.length; i++)uploadImageToStorage(Files[i]);\n    }\n    function uploadImageToStorage(imgToUpload) {\n        const imgNo = Files.indexOf(imgToUpload);\n        const metadata = {\n            contentType: imgToUpload.type\n        };\n        const storage = (0, _storage.getStorage)();\n        const imgAddress = \"TheImages/\" + currentId + \"/img#\" + (imgNo + 1);\n        const storageRef = (0, _storage.ref)(storage, imgAddress);\n        const uploadTask = (0, _storage.uploadBytesResumable)(storageRef, imgToUpload, metadata);\n        uploadTask.on(\"state_changed\", (snapshot)=>{\n            laodLab.innerHTML = getImgUploadProgress();\n        }, (error)=>{\n            alert(\"error\");\n        }, ()=>{\n            (0, _storage.getDownloadURL)(uploadTask.snapshot.ref).then((downloadURL)=>{\n                imagesLinksArray[imgNo] = downloadURL;\n                if (isAllImagesUpload()) {\n                    laodLab.innerHTML = \"all loaded\";\n                    uploadItem();\n                }\n            });\n        });\n    }\n    const realdb = (0, _database.getDatabase)();\n    let date = new Date();\n    date = date.toLocaleString();\n    function clearValues() {\n        submitBtn.disabled = false;\n        textInput.value = \"\";\n        titleInput.value = \"\";\n        clearImage();\n    }\n    function uploadItem() {\n        const load = document.querySelector(\".load\");\n        (0, _database.set)((0, _database.ref)(realdb, \"MemItems/\" + currentId), {\n            id: currentId,\n            title: titleInput.value,\n            text: textInput.value,\n            userName: authorInput.value,\n            userToken: (0, _main.getUserToken)(),\n            date: date,\n            likes: 0,\n            linksOfImagesArray: imagesLinksArray,\n            tags: tagsEl.targetTags\n        }).then(()=>{\n            tagsEl.targetTags = [];\n            tagsEl.getCheckedTags(tagsEl.targetTags);\n            load.classList.add(\"loaded\");\n            load.style.display = \"none\";\n            clearValues();\n            alert(\"\\u041C\\u0435\\u043C \\u043E\\u043F\\u0443\\u0431\\u043B\\u0438\\u043A\\u043E\\u0432\\u0430\\u043D!\");\n        });\n    }\n    form.addEventListener(\"submit\", function(event) {\n        event.preventDefault();\n        if ((0, _main.isAuth)()) {\n            const load = document.querySelector(\".load\");\n            event.disabled = true;\n            load.classList.remove(\"loaded\");\n            load.style.display = \"grid\";\n            if (Files.length === 0) {\n                uploadItem();\n                clearValues();\n                return;\n            }\n            uploadAllImages();\n        } else (0, _main.authModal).openAuthModal();\n    });\n    if (authorInput.value !== \"\") authorInput.classList.add(\"readonly\");\n    page.append(chapter, form);\n    return page;\n}\n\n},{\"../../components/element/element\":\"glRxY\",\"../../components/tagsLabel/tagsLabel\":\"bWv4N\",\"../../main\":\"fclUP\",\"./creator.css\":\"ckL8P\",\"firebase/database\":\"gGruC\",\"firebase/storage\":\"5lcfA\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"bWv4N\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"getTagsLabel\", ()=>getTagsLabel);\nvar _main = require(\"../../main\");\nvar _element = require(\"../element/element\");\nvar _tagsLabelCss = require(\"./tagsLabel.css\");\nfunction getTagsLabel() {\n    const tagsLabel = (0, _element.createElement)(\"label\", \"tags__label\");\n    const selectBtn = (0, _element.createElement)(\"div\", \"select-btn\");\n    const textBtn = (0, _element.createElement)(\"span\", \"btn-text\");\n    const checkedList = (0, _element.createElement)(\"ul\", \"tags__checked\", \"list-reset\");\n    textBtn.innerText = \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0442\\u044D\\u0433\\u0438 (\\u043D\\u0435 \\u0431\\u043E\\u043B\\u0435\\u0435 3):\";\n    const arrowBtn = (0, _element.createElement)(\"span\", \"arrow-down\");\n    arrowBtn.insertAdjacentHTML(\"beforeend\", `<svg width=\"14\" height=\"8\" viewBox=\"0 0 14 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M1 1L7 7L13 1\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    </svg>`);\n    let targetTags = [];\n    const tagBox = (0, _element.createElement)(\"div\", \"tags__box\");\n    const tagList = (0, _element.createElement)(\"ul\", \"tags__items\");\n    const tagSearch = (0, _element.createElement)(\"input\", \"tags__search\");\n    tagSearch.type = \"text\";\n    tagSearch.placeholder = \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u043F\\u043E \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044E\";\n    const list = (0, _main.getTagList)();\n    let tagCount = 0;\n    list.forEach((tag)=>{\n        const temp = (0, _element.createElement)(\"li\", \"tag\");\n        temp.setAttribute(\"data-value\", tag);\n        temp.setAttribute(\"data-id\", tagCount);\n        const name = (0, _element.createElement)(\"span\", \"tag__text\");\n        name.innerText = tag;\n        temp.append(name);\n        tagList.append(temp);\n        temp.addEventListener(\"click\", ()=>{\n            if (!temp.classList.contains(\"checked\") && targetTags.length <= 2) {\n                targetTags.push({\n                    id: temp.dataset.id,\n                    value: temp.dataset.value\n                });\n                temp.classList.add(\"checked\");\n                let tagsArray = targetTags;\n                getCheckedTags(tagsArray);\n                getCurrentTags();\n            }\n        });\n        tagCount++;\n    });\n    function getCurrentTags() {\n        return targetTags;\n    }\n    function resetTag(id) {\n        const items = document.querySelectorAll(\".tag\");\n        for(let i = 0; i < items.length; i++)if (items[i].dataset.id === id) items[i].classList.remove(\"checked\");\n    }\n    function getCheckedTags(tagsArray) {\n        checkedList.innerHTML = \"\";\n        tagsArray.forEach((tag)=>{\n            const { id, value } = tag;\n            const item = (0, _element.createElement)(\"li\", \"checked-tag\");\n            const name = (0, _element.createElement)(\"span\");\n            name.innerText = value;\n            const removeBtn = (0, _element.createElement)(\"div\", \"checked-tag__remove\");\n            removeBtn.insertAdjacentHTML(\"beforeend\", `<svg width=\"15\" height=\"14\" viewBox=\"0 0 15 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M1.63603 12.364L12.9497 1.05024\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n            <path d=\"M2 1L13.3137 12.3137\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n            </svg>\r\n            `);\n            removeBtn.addEventListener(\"click\", (event)=>removeCheckedTag(event));\n            item.append(name, removeBtn);\n            item.setAttribute(\"data-value\", value);\n            item.setAttribute(\"data-id\", id);\n            checkedList.append(item);\n        });\n    }\n    function removeCheckedTag(event) {\n        const currentTag = event.target.closest(\"li\");\n        const currentId = currentTag.dataset.id;\n        for(let i = 0; i < targetTags.length; i++)if (targetTags[i].id === currentId) {\n            targetTags.splice(i, 1);\n            let tagsArray = targetTags;\n            getCheckedTags(tagsArray);\n            resetTag(currentId);\n        }\n    }\n    function listIsEmpty() {\n        if (tagList.innerHTML == \"\") {\n            const tagListMessage = (0, _element.createElement)(\"span\");\n            tagListMessage.innerText = \"\\u0422\\u0430\\u043A\\u043E\\u0433\\u043E \\u0442\\u044D\\u0433\\u0430 \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\";\n            tagList.append(tagListMessage);\n        }\n    }\n    selectBtn.append(textBtn, arrowBtn);\n    tagBox.append(tagSearch, tagList);\n    tagsLabel.append(selectBtn, tagBox, checkedList);\n    tagSearch.addEventListener(\"input\", ()=>{\n        const tags = document.querySelectorAll(\".tag\");\n        let { value } = tagSearch;\n        for(let i = 0; i < tags.length; i++)if (!tags[i].dataset.value.includes(value)) tags[i].classList.add(\"hidden\");\n        else tags[i].classList.remove(\"hidden\");\n        listIsEmpty();\n    });\n    selectBtn.addEventListener(\"click\", ()=>{\n        selectBtn.classList.toggle(\"open\");\n    });\n    document.addEventListener(\"click\", (event)=>{\n        const selectBtn = document.querySelector(\".select-btn\");\n        const tagsLabel = document.querySelector(\".tags__label\");\n        if (selectBtn && !selectBtn.contains(event.target) && !tagsLabel.contains(event.target)) selectBtn.classList.remove(\"open\");\n    });\n    return {\n        tagsLabel,\n        targetTags,\n        getCurrentTags,\n        getCheckedTags\n    };\n}\n\n},{\"../../main\":\"fclUP\",\"../element/element\":\"glRxY\",\"./tagsLabel.css\":\"iKn8a\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"iKn8a\":[function() {},{}],\"ckL8P\":[function() {},{}],\"5lcfA\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _storage = require(\"@firebase/storage\");\nparcelHelpers.exportAll(_storage, exports);\n\n},{\"@firebase/storage\":\"9MEfQ\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"9MEfQ\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"StorageError\", ()=>StorageError);\nparcelHelpers.export(exports, \"StorageErrorCode\", ()=>StorageErrorCode);\nparcelHelpers.export(exports, \"StringFormat\", ()=>StringFormat);\nparcelHelpers.export(exports, \"_FbsBlob\", ()=>FbsBlob);\nparcelHelpers.export(exports, \"_Location\", ()=>Location);\nparcelHelpers.export(exports, \"_TaskEvent\", ()=>TaskEvent);\nparcelHelpers.export(exports, \"_TaskState\", ()=>TaskState);\nparcelHelpers.export(exports, \"_UploadTask\", ()=>UploadTask);\nparcelHelpers.export(exports, \"_dataFromString\", ()=>dataFromString);\nparcelHelpers.export(exports, \"_getChild\", ()=>_getChild);\nparcelHelpers.export(exports, \"_invalidArgument\", ()=>invalidArgument);\nparcelHelpers.export(exports, \"_invalidRootOperation\", ()=>invalidRootOperation);\nparcelHelpers.export(exports, \"connectStorageEmulator\", ()=>connectStorageEmulator);\nparcelHelpers.export(exports, \"deleteObject\", ()=>deleteObject);\nparcelHelpers.export(exports, \"getBlob\", ()=>getBlob);\nparcelHelpers.export(exports, \"getBytes\", ()=>getBytes);\nparcelHelpers.export(exports, \"getDownloadURL\", ()=>getDownloadURL);\nparcelHelpers.export(exports, \"getMetadata\", ()=>getMetadata);\nparcelHelpers.export(exports, \"getStorage\", ()=>getStorage);\nparcelHelpers.export(exports, \"getStream\", ()=>getStream);\nparcelHelpers.export(exports, \"list\", ()=>list);\nparcelHelpers.export(exports, \"listAll\", ()=>listAll);\nparcelHelpers.export(exports, \"ref\", ()=>ref);\nparcelHelpers.export(exports, \"updateMetadata\", ()=>updateMetadata);\nparcelHelpers.export(exports, \"uploadBytes\", ()=>uploadBytes);\nparcelHelpers.export(exports, \"uploadBytesResumable\", ()=>uploadBytesResumable);\nparcelHelpers.export(exports, \"uploadString\", ()=>uploadString);\nvar _app = require(\"@firebase/app\");\nvar _util = require(\"@firebase/util\");\nvar _component = require(\"@firebase/component\");\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */ /**\r\n * Domain name for firebase storage.\r\n */ const DEFAULT_HOST = \"firebasestorage.googleapis.com\";\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */ const CONFIG_STORAGE_BUCKET_KEY = \"storageBucket\";\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */ const DEFAULT_MAX_OPERATION_RETRY_TIME = 120000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */ const DEFAULT_MAX_UPLOAD_RETRY_TIME = 600000;\n/**\r\n * 1 second\r\n */ const DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */ class StorageError extends (0, _util.FirebaseError) {\n    /**\r\n     * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     * @param status_ - Corresponding HTTP Status Code\r\n     */ constructor(code, message, status_ = 0){\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\n        this.status_ = status_;\n        /**\r\n         * Stores custom error data unique to the `StorageError`.\r\n         */ this.customData = {\n            serverResponse: null\n        };\n        this._baseMessage = this.message;\n        // Without this, `instanceof StorageError`, in tests for example,\n        // returns false.\n        Object.setPrototypeOf(this, StorageError.prototype);\n    }\n    get status() {\n        return this.status_;\n    }\n    set status(status) {\n        this.status_ = status;\n    }\n    /**\r\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n     */ _codeEquals(code) {\n        return prependCode(code) === this.code;\n    }\n    /**\r\n     * Optional response message that was added by the server.\r\n     */ get serverResponse() {\n        return this.customData.serverResponse;\n    }\n    set serverResponse(serverResponse) {\n        this.customData.serverResponse = serverResponse;\n        if (this.customData.serverResponse) this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n        else this.message = this._baseMessage;\n    }\n}\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */ var StorageErrorCode;\n(function(StorageErrorCode) {\n    // Shared between all platforms\n    StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\n    StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\n    StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\n    StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\n    StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\n    StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\n    StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\n    StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\n    StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\n    StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\n    StorageErrorCode[\"CANCELED\"] = \"canceled\";\n    // JS specific\n    StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\n    StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\n    StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\n    StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\n    StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\n    StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\n    StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\n    StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\n    StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\n    StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\n    StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\n    StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\n    StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\n    StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\n})(StorageErrorCode || (StorageErrorCode = {}));\nfunction prependCode(code) {\n    return \"storage/\" + code;\n}\nfunction unknown() {\n    const message = \"An unknown error occurred, please check the error payload for server response.\";\n    return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\nfunction objectNotFound(path) {\n    return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\n}\nfunction quotaExceeded(bucket) {\n    return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + \"https://firebase.google.com/pricing/.\");\n}\nfunction unauthenticated() {\n    const message = \"User is not authenticated, please authenticate using Firebase Authentication and try again.\";\n    return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\nfunction unauthorizedApp() {\n    return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, \"This app does not have permission to access Firebase Storage on this project.\");\n}\nfunction unauthorized(path) {\n    return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\n}\nfunction retryLimitExceeded() {\n    return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, \"Max retry time for operation exceeded, please try again.\");\n}\nfunction canceled() {\n    return new StorageError(StorageErrorCode.CANCELED, \"User canceled the upload/download.\");\n}\nfunction invalidUrl(url) {\n    return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\n}\nfunction invalidDefaultBucket(bucket) {\n    return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\n}\nfunction noDefaultBucket() {\n    return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, \"No default bucket found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\nfunction cannotSliceBlob() {\n    return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, \"Cannot slice blob for upload. Please retry the upload.\");\n}\nfunction serverFileWrongSize() {\n    return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, \"Server recorded incorrect upload file size, please retry the upload.\");\n}\nfunction noDownloadURL() {\n    return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, \"The given file does not have any download URLs.\");\n}\nfunction missingPolyFill(polyFill) {\n    return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\n}\n/**\r\n * @internal\r\n */ function invalidArgument(message) {\n    return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\nfunction appDeleted() {\n    return new StorageError(StorageErrorCode.APP_DELETED, \"The Firebase app was deleted.\");\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */ function invalidRootOperation(name) {\n    return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */ function invalidFormat(format, message) {\n    return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */ function internalError(message) {\n    throw new StorageError(StorageErrorCode.INTERNAL_ERROR, \"Internal error: \" + message);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */ class Location {\n    constructor(bucket, path){\n        this.bucket = bucket;\n        this.path_ = path;\n    }\n    get path() {\n        return this.path_;\n    }\n    get isRoot() {\n        return this.path.length === 0;\n    }\n    fullServerUrl() {\n        const encode = encodeURIComponent;\n        return \"/b/\" + encode(this.bucket) + \"/o/\" + encode(this.path);\n    }\n    bucketOnlyServerUrl() {\n        const encode = encodeURIComponent;\n        return \"/b/\" + encode(this.bucket) + \"/o\";\n    }\n    static makeFromBucketSpec(bucketString, host) {\n        let bucketLocation;\n        try {\n            bucketLocation = Location.makeFromUrl(bucketString, host);\n        } catch (e) {\n            // Not valid URL, use as-is. This lets you put bare bucket names in\n            // config.\n            return new Location(bucketString, \"\");\n        }\n        if (bucketLocation.path === \"\") return bucketLocation;\n        else throw invalidDefaultBucket(bucketString);\n    }\n    static makeFromUrl(url, host) {\n        let location = null;\n        const bucketDomain = \"([A-Za-z0-9.\\\\-_]+)\";\n        function gsModify(loc) {\n            if (loc.path.charAt(loc.path.length - 1) === \"/\") loc.path_ = loc.path_.slice(0, -1);\n        }\n        const gsPath = \"(/(.*))?$\";\n        const gsRegex = new RegExp(\"^gs://\" + bucketDomain + gsPath, \"i\");\n        const gsIndices = {\n            bucket: 1,\n            path: 3\n        };\n        function httpModify(loc) {\n            loc.path_ = decodeURIComponent(loc.path);\n        }\n        const version = \"v[A-Za-z0-9_]+\";\n        const firebaseStorageHost = host.replace(/[.]/g, \"\\\\.\");\n        const firebaseStoragePath = \"(/([^?#]*).*)?$\";\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, \"i\");\n        const firebaseStorageIndices = {\n            bucket: 1,\n            path: 3\n        };\n        const cloudStorageHost = host === DEFAULT_HOST ? \"(?:storage.googleapis.com|storage.cloud.google.com)\" : host;\n        const cloudStoragePath = \"([^?#]*)\";\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, \"i\");\n        const cloudStorageIndices = {\n            bucket: 1,\n            path: 2\n        };\n        const groups = [\n            {\n                regex: gsRegex,\n                indices: gsIndices,\n                postModify: gsModify\n            },\n            {\n                regex: firebaseStorageRegExp,\n                indices: firebaseStorageIndices,\n                postModify: httpModify\n            },\n            {\n                regex: cloudStorageRegExp,\n                indices: cloudStorageIndices,\n                postModify: httpModify\n            }\n        ];\n        for(let i = 0; i < groups.length; i++){\n            const group = groups[i];\n            const captures = group.regex.exec(url);\n            if (captures) {\n                const bucketValue = captures[group.indices.bucket];\n                let pathValue = captures[group.indices.path];\n                if (!pathValue) pathValue = \"\";\n                location = new Location(bucketValue, pathValue);\n                group.postModify(location);\n                break;\n            }\n        }\n        if (location == null) throw invalidUrl(url);\n        return location;\n    }\n}\n/**\r\n * A request whose promise always fails.\r\n */ class FailRequest {\n    constructor(error){\n        this.promise_ = Promise.reject(error);\n    }\n    /** @inheritDoc */ getPromise() {\n        return this.promise_;\n    }\n    /** @inheritDoc */ cancel(_appDelete = false) {}\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */ function start(doRequest, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nbackoffCompleteCb, timeout) {\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\n    // type instead of a bunch of functions with state shared in the closure)\n    let waitSeconds = 1;\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let retryTimeoutId = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let globalTimeoutId = null;\n    let hitTimeout = false;\n    let cancelState = 0;\n    function canceled() {\n        return cancelState === 2;\n    }\n    let triggeredCallback = false;\n    function triggerCallback(...args) {\n        if (!triggeredCallback) {\n            triggeredCallback = true;\n            backoffCompleteCb.apply(null, args);\n        }\n    }\n    function callWithDelay(millis) {\n        retryTimeoutId = setTimeout(()=>{\n            retryTimeoutId = null;\n            doRequest(responseHandler, canceled());\n        }, millis);\n    }\n    function clearGlobalTimeout() {\n        if (globalTimeoutId) clearTimeout(globalTimeoutId);\n    }\n    function responseHandler(success, ...args) {\n        if (triggeredCallback) {\n            clearGlobalTimeout();\n            return;\n        }\n        if (success) {\n            clearGlobalTimeout();\n            triggerCallback.call(null, success, ...args);\n            return;\n        }\n        const mustStop = canceled() || hitTimeout;\n        if (mustStop) {\n            clearGlobalTimeout();\n            triggerCallback.call(null, success, ...args);\n            return;\n        }\n        if (waitSeconds < 64) /* TODO(andysoto): don't back off so quickly if we know we're offline. */ waitSeconds *= 2;\n        let waitMillis;\n        if (cancelState === 1) {\n            cancelState = 2;\n            waitMillis = 0;\n        } else waitMillis = (waitSeconds + Math.random()) * 1000;\n        callWithDelay(waitMillis);\n    }\n    let stopped = false;\n    function stop(wasTimeout) {\n        if (stopped) return;\n        stopped = true;\n        clearGlobalTimeout();\n        if (triggeredCallback) return;\n        if (retryTimeoutId !== null) {\n            if (!wasTimeout) cancelState = 2;\n            clearTimeout(retryTimeoutId);\n            callWithDelay(0);\n        } else if (!wasTimeout) cancelState = 1;\n    }\n    callWithDelay(0);\n    globalTimeoutId = setTimeout(()=>{\n        hitTimeout = true;\n        stop(true);\n    }, timeout);\n    return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */ function stop(id) {\n    id(false);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function isJustDef(p) {\n    return p !== void 0;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(p) {\n    return typeof p === \"function\";\n}\nfunction isNonArrayObject(p) {\n    return typeof p === \"object\" && !Array.isArray(p);\n}\nfunction isString(p) {\n    return typeof p === \"string\" || p instanceof String;\n}\nfunction isNativeBlob(p) {\n    return isNativeBlobDefined() && p instanceof Blob;\n}\nfunction isNativeBlobDefined() {\n    return typeof Blob !== \"undefined\";\n}\nfunction validateNumber(argument, minValue, maxValue, value) {\n    if (value < minValue) throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\n    if (value > maxValue) throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function makeUrl(urlPart, host, protocol) {\n    let origin = host;\n    if (protocol == null) origin = `https://${host}`;\n    return `${protocol}://${origin}/v0${urlPart}`;\n}\nfunction makeQueryString(params) {\n    const encode = encodeURIComponent;\n    let queryPart = \"?\";\n    for(const key in params)if (params.hasOwnProperty(key)) {\n        const nextPart = encode(key) + \"=\" + encode(params[key]);\n        queryPart = queryPart + nextPart + \"&\";\n    }\n    // Chop off the extra '&' or '?' on the end\n    queryPart = queryPart.slice(0, -1);\n    return queryPart;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */ var ErrorCode;\n(function(ErrorCode) {\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */ function isRetryStatusCode(status, additionalRetryCodes) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n        // Request Timeout: web server didn't receive full request in time.\n        408,\n        // Too Many Requests: you're getting rate-limited, basically.\n        429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */ class NetworkRequest {\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true){\n        this.url_ = url_;\n        this.method_ = method_;\n        this.headers_ = headers_;\n        this.body_ = body_;\n        this.successCodes_ = successCodes_;\n        this.additionalRetryCodes_ = additionalRetryCodes_;\n        this.callback_ = callback_;\n        this.errorCallback_ = errorCallback_;\n        this.timeout_ = timeout_;\n        this.progressCallback_ = progressCallback_;\n        this.connectionFactory_ = connectionFactory_;\n        this.retry = retry;\n        this.pendingConnection_ = null;\n        this.backoffId_ = null;\n        this.canceled_ = false;\n        this.appDelete_ = false;\n        this.promise_ = new Promise((resolve, reject)=>{\n            this.resolve_ = resolve;\n            this.reject_ = reject;\n            this.start_();\n        });\n    }\n    /**\r\n     * Actually starts the retry loop.\r\n     */ start_() {\n        const doTheRequest = (backoffCallback, canceled)=>{\n            if (canceled) {\n                backoffCallback(false, new RequestEndStatus(false, null, true));\n                return;\n            }\n            const connection = this.connectionFactory_();\n            this.pendingConnection_ = connection;\n            const progressListener = (progressEvent)=>{\n                const loaded = progressEvent.loaded;\n                const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n                if (this.progressCallback_ !== null) this.progressCallback_(loaded, total);\n            };\n            if (this.progressCallback_ !== null) connection.addUploadProgressListener(progressListener);\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            connection.send(this.url_, this.method_, this.body_, this.headers_).then(()=>{\n                if (this.progressCallback_ !== null) connection.removeUploadProgressListener(progressListener);\n                this.pendingConnection_ = null;\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n                const status = connection.getStatus();\n                if (!hitServer || isRetryStatusCode(status, this.additionalRetryCodes_) && this.retry) {\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n                    return;\n                }\n                const successCode = this.successCodes_.indexOf(status) !== -1;\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\n            });\n        };\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */ const backoffDone = (requestWentThrough, status)=>{\n            const resolve = this.resolve_;\n            const reject = this.reject_;\n            const connection = status.connection;\n            if (status.wasSuccessCode) try {\n                const result = this.callback_(connection, connection.getResponse());\n                if (isJustDef(result)) resolve(result);\n                else resolve();\n            } catch (e) {\n                reject(e);\n            }\n            else {\n                if (connection !== null) {\n                    const err = unknown();\n                    err.serverResponse = connection.getErrorText();\n                    if (this.errorCallback_) reject(this.errorCallback_(connection, err));\n                    else reject(err);\n                } else if (status.canceled) {\n                    const err = this.appDelete_ ? appDeleted() : canceled();\n                    reject(err);\n                } else {\n                    const err = retryLimitExceeded();\n                    reject(err);\n                }\n            }\n        };\n        if (this.canceled_) backoffDone(false, new RequestEndStatus(false, null, true));\n        else this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n    /** @inheritDoc */ getPromise() {\n        return this.promise_;\n    }\n    /** @inheritDoc */ cancel(appDelete) {\n        this.canceled_ = true;\n        this.appDelete_ = appDelete || false;\n        if (this.backoffId_ !== null) stop(this.backoffId_);\n        if (this.pendingConnection_ !== null) this.pendingConnection_.abort();\n    }\n}\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */ class RequestEndStatus {\n    constructor(wasSuccessCode, connection, canceled){\n        this.wasSuccessCode = wasSuccessCode;\n        this.connection = connection;\n        this.canceled = !!canceled;\n    }\n}\nfunction addAuthHeader_(headers, authToken) {\n    if (authToken !== null && authToken.length > 0) headers[\"Authorization\"] = \"Firebase \" + authToken;\n}\nfunction addVersionHeader_(headers, firebaseVersion) {\n    headers[\"X-Firebase-Storage-Version\"] = \"webjs/\" + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : \"AppManager\");\n}\nfunction addGmpidHeader_(headers, appId) {\n    if (appId) headers[\"X-Firebase-GMPID\"] = appId;\n}\nfunction addAppCheckHeader_(headers, appCheckToken) {\n    if (appCheckToken !== null) headers[\"X-Firebase-AppCheck\"] = appCheckToken;\n}\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\n    const queryPart = makeQueryString(requestInfo.urlParams);\n    const url = requestInfo.url + queryPart;\n    const headers = Object.assign({}, requestInfo.headers);\n    addGmpidHeader_(headers, appId);\n    addAuthHeader_(headers, authToken);\n    addVersionHeader_(headers, firebaseVersion);\n    addAppCheckHeader_(headers, appCheckToken);\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function getBlobBuilder() {\n    if (typeof BlobBuilder !== \"undefined\") return BlobBuilder;\n    else if (typeof WebKitBlobBuilder !== \"undefined\") return WebKitBlobBuilder;\n    else return undefined;\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */ function getBlob$1(...args) {\n    const BlobBuilder1 = getBlobBuilder();\n    if (BlobBuilder1 !== undefined) {\n        const bb = new BlobBuilder1();\n        for(let i = 0; i < args.length; i++)bb.append(args[i]);\n        return bb.getBlob();\n    } else {\n        if (isNativeBlobDefined()) return new Blob(args);\n        else throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\n    }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */ function sliceBlob(blob, start, end) {\n    if (blob.webkitSlice) return blob.webkitSlice(start, end);\n    else if (blob.mozSlice) return blob.mozSlice(start, end);\n    else if (blob.slice) return blob.slice(start, end);\n    return null;\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /** Converts a Base64 encoded string to a binary string. */ function decodeBase64(encoded) {\n    if (typeof atob === \"undefined\") throw missingPolyFill(\"base-64\");\n    return atob(encoded);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */ const StringFormat = {\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */ RAW: \"raw\",\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */ BASE64: \"base64\",\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */ BASE64URL: \"base64url\",\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */ DATA_URL: \"data_url\"\n};\nclass StringData {\n    constructor(data, contentType){\n        this.data = data;\n        this.contentType = contentType || null;\n    }\n}\n/**\r\n * @internal\r\n */ function dataFromString(format, stringData) {\n    switch(format){\n        case StringFormat.RAW:\n            return new StringData(utf8Bytes_(stringData));\n        case StringFormat.BASE64:\n        case StringFormat.BASE64URL:\n            return new StringData(base64Bytes_(format, stringData));\n        case StringFormat.DATA_URL:\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    }\n    // assert(false);\n    throw unknown();\n}\nfunction utf8Bytes_(value) {\n    const b = [];\n    for(let i = 0; i < value.length; i++){\n        let c = value.charCodeAt(i);\n        if (c <= 127) b.push(c);\n        else if (c <= 2047) b.push(192 | c >> 6, 128 | c & 63);\n        else {\n            if ((c & 64512) === 55296) {\n                // The start of a surrogate pair.\n                const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n                if (!valid) // The second surrogate wasn't there.\n                b.push(239, 191, 189);\n                else {\n                    const hi = c;\n                    const lo = value.charCodeAt(++i);\n                    c = 65536 | (hi & 1023) << 10 | lo & 1023;\n                    b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n                }\n            } else if ((c & 64512) === 56320) // Invalid low surrogate.\n            b.push(239, 191, 189);\n            else b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n        }\n    }\n    return new Uint8Array(b);\n}\nfunction percentEncodedBytes_(value) {\n    let decoded;\n    try {\n        decoded = decodeURIComponent(value);\n    } catch (e) {\n        throw invalidFormat(StringFormat.DATA_URL, \"Malformed data URL.\");\n    }\n    return utf8Bytes_(decoded);\n}\nfunction base64Bytes_(format, value) {\n    switch(format){\n        case StringFormat.BASE64:\n            {\n                const hasMinus = value.indexOf(\"-\") !== -1;\n                const hasUnder = value.indexOf(\"_\") !== -1;\n                if (hasMinus || hasUnder) {\n                    const invalidChar = hasMinus ? \"-\" : \"_\";\n                    throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n                }\n                break;\n            }\n        case StringFormat.BASE64URL:\n            {\n                const hasPlus = value.indexOf(\"+\") !== -1;\n                const hasSlash = value.indexOf(\"/\") !== -1;\n                if (hasPlus || hasSlash) {\n                    const invalidChar = hasPlus ? \"+\" : \"/\";\n                    throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n                }\n                value = value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n                break;\n            }\n    }\n    let bytes;\n    try {\n        bytes = decodeBase64(value);\n    } catch (e) {\n        if (e.message.includes(\"polyfill\")) throw e;\n        throw invalidFormat(format, \"Invalid character found\");\n    }\n    const array = new Uint8Array(bytes.length);\n    for(let i = 0; i < bytes.length; i++)array[i] = bytes.charCodeAt(i);\n    return array;\n}\nclass DataURLParts {\n    constructor(dataURL){\n        this.base64 = false;\n        this.contentType = null;\n        const matches = dataURL.match(/^data:([^,]+)?,/);\n        if (matches === null) throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n        const middle = matches[1] || null;\n        if (middle != null) {\n            this.base64 = endsWith(middle, \";base64\");\n            this.contentType = this.base64 ? middle.substring(0, middle.length - 7) : middle;\n        }\n        this.rest = dataURL.substring(dataURL.indexOf(\",\") + 1);\n    }\n}\nfunction dataURLBytes_(dataUrl) {\n    const parts = new DataURLParts(dataUrl);\n    if (parts.base64) return base64Bytes_(StringFormat.BASE64, parts.rest);\n    else return percentEncodedBytes_(parts.rest);\n}\nfunction dataURLContentType_(dataUrl) {\n    const parts = new DataURLParts(dataUrl);\n    return parts.contentType;\n}\nfunction endsWith(s, end) {\n    const longEnough = s.length >= end.length;\n    if (!longEnough) return false;\n    return s.substring(s.length - end.length) === end;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */ class FbsBlob {\n    constructor(data, elideCopy){\n        let size = 0;\n        let blobType = \"\";\n        if (isNativeBlob(data)) {\n            this.data_ = data;\n            size = data.size;\n            blobType = data.type;\n        } else if (data instanceof ArrayBuffer) {\n            if (elideCopy) this.data_ = new Uint8Array(data);\n            else {\n                this.data_ = new Uint8Array(data.byteLength);\n                this.data_.set(new Uint8Array(data));\n            }\n            size = this.data_.length;\n        } else if (data instanceof Uint8Array) {\n            if (elideCopy) this.data_ = data;\n            else {\n                this.data_ = new Uint8Array(data.length);\n                this.data_.set(data);\n            }\n            size = data.length;\n        }\n        this.size_ = size;\n        this.type_ = blobType;\n    }\n    size() {\n        return this.size_;\n    }\n    type() {\n        return this.type_;\n    }\n    slice(startByte, endByte) {\n        if (isNativeBlob(this.data_)) {\n            const realBlob = this.data_;\n            const sliced = sliceBlob(realBlob, startByte, endByte);\n            if (sliced === null) return null;\n            return new FbsBlob(sliced);\n        } else {\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n            return new FbsBlob(slice, true);\n        }\n    }\n    static getBlob(...args) {\n        if (isNativeBlobDefined()) {\n            const blobby = args.map((val)=>{\n                if (val instanceof FbsBlob) return val.data_;\n                else return val;\n            });\n            return new FbsBlob(getBlob$1.apply(null, blobby));\n        } else {\n            const uint8Arrays = args.map((val)=>{\n                if (isString(val)) return dataFromString(StringFormat.RAW, val).data;\n                else // Blobs don't exist, so this has to be a Uint8Array.\n                return val.data_;\n            });\n            let finalLength = 0;\n            uint8Arrays.forEach((array)=>{\n                finalLength += array.byteLength;\n            });\n            const merged = new Uint8Array(finalLength);\n            let index = 0;\n            uint8Arrays.forEach((array)=>{\n                for(let i = 0; i < array.length; i++)merged[index++] = array[i];\n            });\n            return new FbsBlob(merged, true);\n        }\n    }\n    uploadData() {\n        return this.data_;\n    }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */ function jsonObjectOrNull(s) {\n    let obj;\n    try {\n        obj = JSON.parse(s);\n    } catch (e) {\n        return null;\n    }\n    if (isNonArrayObject(obj)) return obj;\n    else return null;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */ /**\r\n * @return Null if the path is already at the root.\r\n */ function parent(path) {\n    if (path.length === 0) return null;\n    const index = path.lastIndexOf(\"/\");\n    if (index === -1) return \"\";\n    const newPath = path.slice(0, index);\n    return newPath;\n}\nfunction child(path, childPath) {\n    const canonicalChildPath = childPath.split(\"/\").filter((component)=>component.length > 0).join(\"/\");\n    if (path.length === 0) return canonicalChildPath;\n    else return path + \"/\" + canonicalChildPath;\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */ function lastComponent(path) {\n    const index = path.lastIndexOf(\"/\", path.length - 2);\n    if (index === -1) return path;\n    else return path.slice(index + 1);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function noXform_(metadata, value) {\n    return value;\n}\nclass Mapping {\n    constructor(server, local, writable, xform){\n        this.server = server;\n        this.local = local || server;\n        this.writable = !!writable;\n        this.xform = xform || noXform_;\n    }\n}\nlet mappings_ = null;\nfunction xformPath(fullPath) {\n    if (!isString(fullPath) || fullPath.length < 2) return fullPath;\n    else return lastComponent(fullPath);\n}\nfunction getMappings() {\n    if (mappings_) return mappings_;\n    const mappings = [];\n    mappings.push(new Mapping(\"bucket\"));\n    mappings.push(new Mapping(\"generation\"));\n    mappings.push(new Mapping(\"metageneration\"));\n    mappings.push(new Mapping(\"name\", \"fullPath\", true));\n    function mappingsXformPath(_metadata, fullPath) {\n        return xformPath(fullPath);\n    }\n    const nameMapping = new Mapping(\"name\");\n    nameMapping.xform = mappingsXformPath;\n    mappings.push(nameMapping);\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */ function xformSize(_metadata, size) {\n        if (size !== undefined) return Number(size);\n        else return size;\n    }\n    const sizeMapping = new Mapping(\"size\");\n    sizeMapping.xform = xformSize;\n    mappings.push(sizeMapping);\n    mappings.push(new Mapping(\"timeCreated\"));\n    mappings.push(new Mapping(\"updated\"));\n    mappings.push(new Mapping(\"md5Hash\", null, true));\n    mappings.push(new Mapping(\"cacheControl\", null, true));\n    mappings.push(new Mapping(\"contentDisposition\", null, true));\n    mappings.push(new Mapping(\"contentEncoding\", null, true));\n    mappings.push(new Mapping(\"contentLanguage\", null, true));\n    mappings.push(new Mapping(\"contentType\", null, true));\n    mappings.push(new Mapping(\"metadata\", \"customMetadata\", true));\n    mappings_ = mappings;\n    return mappings_;\n}\nfunction addRef(metadata, service) {\n    function generateRef() {\n        const bucket = metadata[\"bucket\"];\n        const path = metadata[\"fullPath\"];\n        const loc = new Location(bucket, path);\n        return service._makeStorageReference(loc);\n    }\n    Object.defineProperty(metadata, \"ref\", {\n        get: generateRef\n    });\n}\nfunction fromResource(service, resource, mappings) {\n    const metadata = {};\n    metadata[\"type\"] = \"file\";\n    const len = mappings.length;\n    for(let i = 0; i < len; i++){\n        const mapping = mappings[i];\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n    }\n    addRef(metadata, service);\n    return metadata;\n}\nfunction fromResourceString(service, resourceString, mappings) {\n    const obj = jsonObjectOrNull(resourceString);\n    if (obj === null) return null;\n    const resource = obj;\n    return fromResource(service, resource, mappings);\n}\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n    const obj = jsonObjectOrNull(resourceString);\n    if (obj === null) return null;\n    if (!isString(obj[\"downloadTokens\"])) // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n    const tokens = obj[\"downloadTokens\"];\n    if (tokens.length === 0) return null;\n    const encode = encodeURIComponent;\n    const tokensList = tokens.split(\",\");\n    const urls = tokensList.map((token)=>{\n        const bucket = metadata[\"bucket\"];\n        const path = metadata[\"fullPath\"];\n        const urlPart = \"/b/\" + encode(bucket) + \"/o/\" + encode(path);\n        const base = makeUrl(urlPart, host, protocol);\n        const queryString = makeQueryString({\n            alt: \"media\",\n            token\n        });\n        return base + queryString;\n    });\n    return urls[0];\n}\nfunction toResourceString(metadata, mappings) {\n    const resource = {};\n    const len = mappings.length;\n    for(let i = 0; i < len; i++){\n        const mapping = mappings[i];\n        if (mapping.writable) resource[mapping.server] = metadata[mapping.local];\n    }\n    return JSON.stringify(resource);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ const PREFIXES_KEY = \"prefixes\";\nconst ITEMS_KEY = \"items\";\nfunction fromBackendResponse(service, bucket, resource) {\n    const listResult = {\n        prefixes: [],\n        items: [],\n        nextPageToken: resource[\"nextPageToken\"]\n    };\n    if (resource[PREFIXES_KEY]) for (const path of resource[PREFIXES_KEY]){\n        const pathWithoutTrailingSlash = path.replace(/\\/$/, \"\");\n        const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n        listResult.prefixes.push(reference);\n    }\n    if (resource[ITEMS_KEY]) for (const item of resource[ITEMS_KEY]){\n        const reference = service._makeStorageReference(new Location(bucket, item[\"name\"]));\n        listResult.items.push(reference);\n    }\n    return listResult;\n}\nfunction fromResponseString(service, bucket, resourceString) {\n    const obj = jsonObjectOrNull(resourceString);\n    if (obj === null) return null;\n    const resource = obj;\n    return fromBackendResponse(service, bucket, resource);\n}\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */ class RequestInfo {\n    constructor(url, method, /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */ handler, timeout){\n        this.url = url;\n        this.method = method;\n        this.handler = handler;\n        this.timeout = timeout;\n        this.urlParams = {};\n        this.headers = {};\n        this.body = null;\n        this.errorHandler = null;\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */ this.progressCallback = null;\n        this.successCodes = [\n            200\n        ];\n        this.additionalRetryCodes = [];\n    }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */ function handlerCheck(cndn) {\n    if (!cndn) throw unknown();\n}\nfunction metadataHandler(service, mappings) {\n    function handler(xhr, text) {\n        const metadata = fromResourceString(service, text, mappings);\n        handlerCheck(metadata !== null);\n        return metadata;\n    }\n    return handler;\n}\nfunction listHandler(service, bucket) {\n    function handler(xhr, text) {\n        const listResult = fromResponseString(service, bucket, text);\n        handlerCheck(listResult !== null);\n        return listResult;\n    }\n    return handler;\n}\nfunction downloadUrlHandler(service, mappings) {\n    function handler(xhr, text) {\n        const metadata = fromResourceString(service, text, mappings);\n        handlerCheck(metadata !== null);\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n    }\n    return handler;\n}\nfunction sharedErrorHandler(location) {\n    function errorHandler(xhr, err) {\n        let newErr;\n        if (xhr.getStatus() === 401) {\n            if (// This exact message string is the only consistent part of the\n            // server's error response that identifies it as an App Check error.\n            xhr.getErrorText().includes(\"Firebase App Check token is invalid\")) newErr = unauthorizedApp();\n            else newErr = unauthenticated();\n        } else {\n            if (xhr.getStatus() === 402) newErr = quotaExceeded(location.bucket);\n            else if (xhr.getStatus() === 403) newErr = unauthorized(location.path);\n            else newErr = err;\n        }\n        newErr.status = xhr.getStatus();\n        newErr.serverResponse = err.serverResponse;\n        return newErr;\n    }\n    return errorHandler;\n}\nfunction objectErrorHandler(location) {\n    const shared = sharedErrorHandler(location);\n    function errorHandler(xhr, err) {\n        let newErr = shared(xhr, err);\n        if (xhr.getStatus() === 404) newErr = objectNotFound(location.path);\n        newErr.serverResponse = err.serverResponse;\n        return newErr;\n    }\n    return errorHandler;\n}\nfunction getMetadata$2(service, location, mappings) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = \"GET\";\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n    const urlParams = {};\n    if (location.isRoot) urlParams[\"prefix\"] = \"\";\n    else urlParams[\"prefix\"] = location.path + \"/\";\n    if (delimiter && delimiter.length > 0) urlParams[\"delimiter\"] = delimiter;\n    if (pageToken) urlParams[\"pageToken\"] = pageToken;\n    if (maxResults) urlParams[\"maxResults\"] = maxResults;\n    const urlPart = location.bucketOnlyServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = \"GET\";\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n    requestInfo.urlParams = urlParams;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol) + \"?alt=media\";\n    const method = \"GET\";\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, (_, data)=>data, timeout);\n    requestInfo.errorHandler = objectErrorHandler(location);\n    if (maxDownloadSizeBytes !== undefined) {\n        requestInfo.headers[\"Range\"] = `bytes=0-${maxDownloadSizeBytes}`;\n        requestInfo.successCodes = [\n            200 /* OK */ ,\n            206 /* Partial Content */ \n        ];\n    }\n    return requestInfo;\n}\nfunction getDownloadUrl(service, location, mappings) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = \"GET\";\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction updateMetadata$2(service, location, metadata, mappings) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = \"PATCH\";\n    const body = toResourceString(metadata, mappings);\n    const headers = {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n    };\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n    requestInfo.headers = headers;\n    requestInfo.body = body;\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction deleteObject$2(service, location) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = \"DELETE\";\n    const timeout = service.maxOperationRetryTime;\n    function handler(_xhr, _text) {}\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.successCodes = [\n        200,\n        204\n    ];\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction determineContentType_(metadata, blob) {\n    return metadata && metadata[\"contentType\"] || blob && blob.type() || \"application/octet-stream\";\n}\nfunction metadataForUpload_(location, blob, metadata) {\n    const metadataClone = Object.assign({}, metadata);\n    metadataClone[\"fullPath\"] = location.path;\n    metadataClone[\"size\"] = blob.size();\n    if (!metadataClone[\"contentType\"]) metadataClone[\"contentType\"] = determineContentType_(null, blob);\n    return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */ function multipartUpload(service, location, mappings, blob, metadata) {\n    const urlPart = location.bucketOnlyServerUrl();\n    const headers = {\n        \"X-Goog-Upload-Protocol\": \"multipart\"\n    };\n    function genBoundary() {\n        let str = \"\";\n        for(let i = 0; i < 2; i++)str = str + Math.random().toString().slice(2);\n        return str;\n    }\n    const boundary = genBoundary();\n    headers[\"Content-Type\"] = \"multipart/related; boundary=\" + boundary;\n    const metadata_ = metadataForUpload_(location, blob, metadata);\n    const metadataString = toResourceString(metadata_, mappings);\n    const preBlobPart = \"--\" + boundary + \"\\r\\n\" + \"Content-Type: application/json; charset=utf-8\\r\\n\\r\\n\" + metadataString + \"\\r\\n--\" + boundary + \"\\r\\n\" + \"Content-Type: \" + metadata_[\"contentType\"] + \"\\r\\n\\r\\n\";\n    const postBlobPart = \"\\r\\n--\" + boundary + \"--\";\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n    if (body === null) throw cannotSliceBlob();\n    const urlParams = {\n        name: metadata_[\"fullPath\"]\n    };\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = \"POST\";\n    const timeout = service.maxUploadRetryTime;\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n    requestInfo.urlParams = urlParams;\n    requestInfo.headers = headers;\n    requestInfo.body = body.uploadData();\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */ class ResumableUploadStatus {\n    constructor(current, total, finalized, metadata){\n        this.current = current;\n        this.total = total;\n        this.finalized = !!finalized;\n        this.metadata = metadata || null;\n    }\n}\nfunction checkResumeHeader_(xhr, allowed) {\n    let status = null;\n    try {\n        status = xhr.getResponseHeader(\"X-Goog-Upload-Status\");\n    } catch (e) {\n        handlerCheck(false);\n    }\n    const allowedStatus = allowed || [\n        \"active\"\n    ];\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n    return status;\n}\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n    const urlPart = location.bucketOnlyServerUrl();\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\n    const urlParams = {\n        name: metadataForUpload[\"fullPath\"]\n    };\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = \"POST\";\n    const headers = {\n        \"X-Goog-Upload-Protocol\": \"resumable\",\n        \"X-Goog-Upload-Command\": \"start\",\n        \"X-Goog-Upload-Header-Content-Length\": `${blob.size()}`,\n        \"X-Goog-Upload-Header-Content-Type\": metadataForUpload[\"contentType\"],\n        \"Content-Type\": \"application/json; charset=utf-8\"\n    };\n    const body = toResourceString(metadataForUpload, mappings);\n    const timeout = service.maxUploadRetryTime;\n    function handler(xhr) {\n        checkResumeHeader_(xhr);\n        let url;\n        try {\n            url = xhr.getResponseHeader(\"X-Goog-Upload-URL\");\n        } catch (e) {\n            handlerCheck(false);\n        }\n        handlerCheck(isString(url));\n        return url;\n    }\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.urlParams = urlParams;\n    requestInfo.headers = headers;\n    requestInfo.body = body;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */ function getResumableUploadStatus(service, location, url, blob) {\n    const headers = {\n        \"X-Goog-Upload-Command\": \"query\"\n    };\n    function handler(xhr) {\n        const status = checkResumeHeader_(xhr, [\n            \"active\",\n            \"final\"\n        ]);\n        let sizeString = null;\n        try {\n            sizeString = xhr.getResponseHeader(\"X-Goog-Upload-Size-Received\");\n        } catch (e) {\n            handlerCheck(false);\n        }\n        if (!sizeString) // null or empty string\n        handlerCheck(false);\n        const size = Number(sizeString);\n        handlerCheck(!isNaN(size));\n        return new ResumableUploadStatus(size, blob.size(), status === \"final\");\n    }\n    const method = \"POST\";\n    const timeout = service.maxUploadRetryTime;\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.headers = headers;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */ const RESUMABLE_UPLOAD_CHUNK_SIZE = 262144;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */ function continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n    // TODO(andysoto): standardize on internal asserts\n    // assert(!(opt_status && opt_status.finalized));\n    const status_ = new ResumableUploadStatus(0, 0);\n    if (status) {\n        status_.current = status.current;\n        status_.total = status.total;\n    } else {\n        status_.current = 0;\n        status_.total = blob.size();\n    }\n    if (blob.size() !== status_.total) throw serverFileWrongSize();\n    const bytesLeft = status_.total - status_.current;\n    let bytesToUpload = bytesLeft;\n    if (chunkSize > 0) bytesToUpload = Math.min(bytesToUpload, chunkSize);\n    const startByte = status_.current;\n    const endByte = startByte + bytesToUpload;\n    let uploadCommand = \"\";\n    if (bytesToUpload === 0) uploadCommand = \"finalize\";\n    else if (bytesLeft === bytesToUpload) uploadCommand = \"upload, finalize\";\n    else uploadCommand = \"upload\";\n    const headers = {\n        \"X-Goog-Upload-Command\": uploadCommand,\n        \"X-Goog-Upload-Offset\": `${status_.current}`\n    };\n    const body = blob.slice(startByte, endByte);\n    if (body === null) throw cannotSliceBlob();\n    function handler(xhr, text) {\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\n        // the 'x-range-md5' header comes back with status code 308 responses.\n        // We'll only be able to bail out though, because you can't re-upload a\n        // range that you previously uploaded.\n        const uploadStatus = checkResumeHeader_(xhr, [\n            \"active\",\n            \"final\"\n        ]);\n        const newCurrent = status_.current + bytesToUpload;\n        const size = blob.size();\n        let metadata;\n        if (uploadStatus === \"final\") metadata = metadataHandler(service, mappings)(xhr, text);\n        else metadata = null;\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === \"final\", metadata);\n    }\n    const method = \"POST\";\n    const timeout = service.maxUploadRetryTime;\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.headers = headers;\n    requestInfo.body = body.uploadData();\n    requestInfo.progressCallback = progressCallback || null;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */ const TaskEvent = {\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */ STATE_CHANGED: \"state_changed\"\n};\n// type keys = keyof TaskState\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */ const TaskState = {\n    /** The task is currently transferring data. */ RUNNING: \"running\",\n    /** The task was paused by the user. */ PAUSED: \"paused\",\n    /** The task completed successfully. */ SUCCESS: \"success\",\n    /** The task was canceled. */ CANCELED: \"canceled\",\n    /** The task failed with an error. */ ERROR: \"error\"\n};\nfunction taskStateFromInternalTaskState(state) {\n    switch(state){\n        case \"running\" /* InternalTaskState.RUNNING */ :\n        case \"pausing\" /* InternalTaskState.PAUSING */ :\n        case \"canceling\" /* InternalTaskState.CANCELING */ :\n            return TaskState.RUNNING;\n        case \"paused\" /* InternalTaskState.PAUSED */ :\n            return TaskState.PAUSED;\n        case \"success\" /* InternalTaskState.SUCCESS */ :\n            return TaskState.SUCCESS;\n        case \"canceled\" /* InternalTaskState.CANCELED */ :\n            return TaskState.CANCELED;\n        case \"error\" /* InternalTaskState.ERROR */ :\n            return TaskState.ERROR;\n        default:\n            // TODO(andysoto): assert(false);\n            return TaskState.ERROR;\n    }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ class Observer {\n    constructor(nextOrObserver, error, complete){\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n        if (asFunctions) {\n            this.next = nextOrObserver;\n            this.error = error !== null && error !== void 0 ? error : undefined;\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n        } else {\n            const observer = nextOrObserver;\n            this.next = observer.next;\n            this.error = observer.error;\n            this.complete = observer.complete;\n        }\n    }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */ // eslint-disable-next-line @typescript-eslint/ban-types\nfunction async(f) {\n    return (...argsToForward)=>{\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        Promise.resolve().then(()=>f(...argsToForward));\n    };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /** An override for the text-based Connection. Used in tests. */ let textFactoryOverride = null;\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */ class XhrConnection {\n    constructor(){\n        this.sent_ = false;\n        this.xhr_ = new XMLHttpRequest();\n        this.initXhr();\n        this.errorCode_ = ErrorCode.NO_ERROR;\n        this.sendPromise_ = new Promise((resolve)=>{\n            this.xhr_.addEventListener(\"abort\", ()=>{\n                this.errorCode_ = ErrorCode.ABORT;\n                resolve();\n            });\n            this.xhr_.addEventListener(\"error\", ()=>{\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\n                resolve();\n            });\n            this.xhr_.addEventListener(\"load\", ()=>{\n                resolve();\n            });\n        });\n    }\n    send(url, method, body, headers) {\n        if (this.sent_) throw internalError(\"cannot .send() more than once\");\n        this.sent_ = true;\n        this.xhr_.open(method, url, true);\n        if (headers !== undefined) {\n            for(const key in headers)if (headers.hasOwnProperty(key)) this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n        if (body !== undefined) this.xhr_.send(body);\n        else this.xhr_.send();\n        return this.sendPromise_;\n    }\n    getErrorCode() {\n        if (!this.sent_) throw internalError(\"cannot .getErrorCode() before sending\");\n        return this.errorCode_;\n    }\n    getStatus() {\n        if (!this.sent_) throw internalError(\"cannot .getStatus() before sending\");\n        try {\n            return this.xhr_.status;\n        } catch (e) {\n            return -1;\n        }\n    }\n    getResponse() {\n        if (!this.sent_) throw internalError(\"cannot .getResponse() before sending\");\n        return this.xhr_.response;\n    }\n    getErrorText() {\n        if (!this.sent_) throw internalError(\"cannot .getErrorText() before sending\");\n        return this.xhr_.statusText;\n    }\n    /** Aborts the request. */ abort() {\n        this.xhr_.abort();\n    }\n    getResponseHeader(header) {\n        return this.xhr_.getResponseHeader(header);\n    }\n    addUploadProgressListener(listener) {\n        if (this.xhr_.upload != null) this.xhr_.upload.addEventListener(\"progress\", listener);\n    }\n    removeUploadProgressListener(listener) {\n        if (this.xhr_.upload != null) this.xhr_.upload.removeEventListener(\"progress\", listener);\n    }\n}\nclass XhrTextConnection extends XhrConnection {\n    initXhr() {\n        this.xhr_.responseType = \"text\";\n    }\n}\nfunction newTextConnection() {\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\nclass XhrBytesConnection extends XhrConnection {\n    initXhr() {\n        this.xhr_.responseType = \"arraybuffer\";\n    }\n}\nfunction newBytesConnection() {\n    return new XhrBytesConnection();\n}\nclass XhrBlobConnection extends XhrConnection {\n    initXhr() {\n        this.xhr_.responseType = \"blob\";\n    }\n}\nfunction newBlobConnection() {\n    return new XhrBlobConnection();\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */ class UploadTask {\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */ constructor(ref, blob, metadata = null){\n        /**\r\n         * Number of bytes transferred so far.\r\n         */ this._transferred = 0;\n        this._needToFetchStatus = false;\n        this._needToFetchMetadata = false;\n        this._observers = [];\n        this._error = undefined;\n        this._uploadUrl = undefined;\n        this._request = undefined;\n        this._chunkMultiplier = 1;\n        this._resolve = undefined;\n        this._reject = undefined;\n        this._ref = ref;\n        this._blob = blob;\n        this._metadata = metadata;\n        this._mappings = getMappings();\n        this._resumable = this._shouldDoResumable(this._blob);\n        this._state = \"running\" /* InternalTaskState.RUNNING */ ;\n        this._errorHandler = (error)=>{\n            this._request = undefined;\n            this._chunkMultiplier = 1;\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\n                this._needToFetchStatus = true;\n                this.completeTransitions_();\n            } else {\n                const backoffExpired = this.isExponentialBackoffExpired();\n                if (isRetryStatusCode(error.status, [])) {\n                    if (backoffExpired) error = retryLimitExceeded();\n                    else {\n                        this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\n                        this._needToFetchStatus = true;\n                        this.completeTransitions_();\n                        return;\n                    }\n                }\n                this._error = error;\n                this._transition(\"error\" /* InternalTaskState.ERROR */ );\n            }\n        };\n        this._metadataErrorHandler = (error)=>{\n            this._request = undefined;\n            if (error._codeEquals(StorageErrorCode.CANCELED)) this.completeTransitions_();\n            else {\n                this._error = error;\n                this._transition(\"error\" /* InternalTaskState.ERROR */ );\n            }\n        };\n        this.sleepTime = 0;\n        this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n        this._promise = new Promise((resolve, reject)=>{\n            this._resolve = resolve;\n            this._reject = reject;\n            this._start();\n        });\n        // Prevent uncaught rejections on the internal promise from bubbling out\n        // to the top level with a dummy handler.\n        this._promise.then(null, ()=>{});\n    }\n    isExponentialBackoffExpired() {\n        return this.sleepTime > this.maxSleepTime;\n    }\n    _makeProgressCallback() {\n        const sizeBefore = this._transferred;\n        return (loaded)=>this._updateProgress(sizeBefore + loaded);\n    }\n    _shouldDoResumable(blob) {\n        return blob.size() > 262144;\n    }\n    _start() {\n        if (this._state !== \"running\" /* InternalTaskState.RUNNING */ ) // This can happen if someone pauses us in a resume callback, for example.\n        return;\n        if (this._request !== undefined) return;\n        if (this._resumable) {\n            if (this._uploadUrl === undefined) this._createResumable();\n            else {\n                if (this._needToFetchStatus) this._fetchStatus();\n                else if (this._needToFetchMetadata) // Happens if we miss the metadata on upload completion.\n                this._fetchMetadata();\n                else this.pendingTimeout = setTimeout(()=>{\n                    this.pendingTimeout = undefined;\n                    this._continueUpload();\n                }, this.sleepTime);\n            }\n        } else this._oneShotUpload();\n    }\n    _resolveToken(callback) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        Promise.all([\n            this._ref.storage._getAuthToken(),\n            this._ref.storage._getAppCheckToken()\n        ]).then(([authToken, appCheckToken])=>{\n            switch(this._state){\n                case \"running\" /* InternalTaskState.RUNNING */ :\n                    callback(authToken, appCheckToken);\n                    break;\n                case \"canceling\" /* InternalTaskState.CANCELING */ :\n                    this._transition(\"canceled\" /* InternalTaskState.CANCELED */ );\n                    break;\n                case \"pausing\" /* InternalTaskState.PAUSING */ :\n                    this._transition(\"paused\" /* InternalTaskState.PAUSED */ );\n                    break;\n            }\n        });\n    }\n    // TODO(andysoto): assert false\n    _createResumable() {\n        this._resolveToken((authToken, appCheckToken)=>{\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n            this._request = createRequest;\n            createRequest.getPromise().then((url)=>{\n                this._request = undefined;\n                this._uploadUrl = url;\n                this._needToFetchStatus = false;\n                this.completeTransitions_();\n            }, this._errorHandler);\n        });\n    }\n    _fetchStatus() {\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\n        const url = this._uploadUrl;\n        this._resolveToken((authToken, appCheckToken)=>{\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n            this._request = statusRequest;\n            statusRequest.getPromise().then((status)=>{\n                status;\n                this._request = undefined;\n                this._updateProgress(status.current);\n                this._needToFetchStatus = false;\n                if (status.finalized) this._needToFetchMetadata = true;\n                this.completeTransitions_();\n            }, this._errorHandler);\n        });\n    }\n    _continueUpload() {\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\n        const url = this._uploadUrl;\n        this._resolveToken((authToken, appCheckToken)=>{\n            let requestInfo;\n            try {\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\n            } catch (e) {\n                this._error = e;\n                this._transition(\"error\" /* InternalTaskState.ERROR */ );\n                return;\n            }\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n            );\n            this._request = uploadRequest;\n            uploadRequest.getPromise().then((newStatus)=>{\n                this._increaseMultiplier();\n                this._request = undefined;\n                this._updateProgress(newStatus.current);\n                if (newStatus.finalized) {\n                    this._metadata = newStatus.metadata;\n                    this._transition(\"success\" /* InternalTaskState.SUCCESS */ );\n                } else this.completeTransitions_();\n            }, this._errorHandler);\n        });\n    }\n    _increaseMultiplier() {\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n        // Max chunk size is 32M.\n        if (currentSize * 2 < 33554432) this._chunkMultiplier *= 2;\n    }\n    _fetchMetadata() {\n        this._resolveToken((authToken, appCheckToken)=>{\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n            this._request = metadataRequest;\n            metadataRequest.getPromise().then((metadata)=>{\n                this._request = undefined;\n                this._metadata = metadata;\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */ );\n            }, this._metadataErrorHandler);\n        });\n    }\n    _oneShotUpload() {\n        this._resolveToken((authToken, appCheckToken)=>{\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n            this._request = multipartRequest;\n            multipartRequest.getPromise().then((metadata)=>{\n                this._request = undefined;\n                this._metadata = metadata;\n                this._updateProgress(this._blob.size());\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */ );\n            }, this._errorHandler);\n        });\n    }\n    _updateProgress(transferred) {\n        const old = this._transferred;\n        this._transferred = transferred;\n        // A progress update can make the \"transferred\" value smaller (e.g. a\n        // partial upload not completed by server, after which the \"transferred\"\n        // value may reset to the value at the beginning of the request).\n        if (this._transferred !== old) this._notifyObservers();\n    }\n    _transition(state) {\n        if (this._state === state) return;\n        switch(state){\n            case \"canceling\" /* InternalTaskState.CANCELING */ :\n            case \"pausing\" /* InternalTaskState.PAUSING */ :\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING);\n                this._state = state;\n                if (this._request !== undefined) this._request.cancel();\n                else if (this.pendingTimeout) {\n                    clearTimeout(this.pendingTimeout);\n                    this.pendingTimeout = undefined;\n                    this.completeTransitions_();\n                }\n                break;\n            case \"running\" /* InternalTaskState.RUNNING */ :\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSED ||\n                //        this.state_ === InternalTaskState.PAUSING);\n                const wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */ ;\n                this._state = state;\n                if (wasPaused) {\n                    this._notifyObservers();\n                    this._start();\n                }\n                break;\n            case \"paused\" /* InternalTaskState.PAUSED */ :\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSING);\n                this._state = state;\n                this._notifyObservers();\n                break;\n            case \"canceled\" /* InternalTaskState.CANCELED */ :\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSED ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this._error = canceled();\n                this._state = state;\n                this._notifyObservers();\n                break;\n            case \"error\" /* InternalTaskState.ERROR */ :\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this._state = state;\n                this._notifyObservers();\n                break;\n            case \"success\" /* InternalTaskState.SUCCESS */ :\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this._state = state;\n                this._notifyObservers();\n                break;\n        }\n    }\n    completeTransitions_() {\n        switch(this._state){\n            case \"pausing\" /* InternalTaskState.PAUSING */ :\n                this._transition(\"paused\" /* InternalTaskState.PAUSED */ );\n                break;\n            case \"canceling\" /* InternalTaskState.CANCELING */ :\n                this._transition(\"canceled\" /* InternalTaskState.CANCELED */ );\n                break;\n            case \"running\" /* InternalTaskState.RUNNING */ :\n                this._start();\n                break;\n        }\n    }\n    /**\r\n     * A snapshot of the current task state.\r\n     */ get snapshot() {\n        const externalState = taskStateFromInternalTaskState(this._state);\n        return {\n            bytesTransferred: this._transferred,\n            totalBytes: this._blob.size(),\n            state: externalState,\n            metadata: this._metadata,\n            task: this,\n            ref: this._ref\n        };\n    }\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */ on(type, nextOrObserver, error, completed) {\n        // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n        this._addObserver(observer);\n        return ()=>{\n            this._removeObserver(observer);\n        };\n    }\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */ then(onFulfilled, onRejected) {\n        // These casts are needed so that TypeScript can infer the types of the\n        // resulting Promise.\n        return this._promise.then(onFulfilled, onRejected);\n    }\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */ catch(onRejected) {\n        return this.then(null, onRejected);\n    }\n    /**\r\n     * Adds the given observer.\r\n     */ _addObserver(observer) {\n        this._observers.push(observer);\n        this._notifyObserver(observer);\n    }\n    /**\r\n     * Removes the given observer.\r\n     */ _removeObserver(observer) {\n        const i = this._observers.indexOf(observer);\n        if (i !== -1) this._observers.splice(i, 1);\n    }\n    _notifyObservers() {\n        this._finishPromise();\n        const observers = this._observers.slice();\n        observers.forEach((observer)=>{\n            this._notifyObserver(observer);\n        });\n    }\n    _finishPromise() {\n        if (this._resolve !== undefined) {\n            let triggered = true;\n            switch(taskStateFromInternalTaskState(this._state)){\n                case TaskState.SUCCESS:\n                    async(this._resolve.bind(null, this.snapshot))();\n                    break;\n                case TaskState.CANCELED:\n                case TaskState.ERROR:\n                    const toCall = this._reject;\n                    async(toCall.bind(null, this._error))();\n                    break;\n                default:\n                    triggered = false;\n                    break;\n            }\n            if (triggered) {\n                this._resolve = undefined;\n                this._reject = undefined;\n            }\n        }\n    }\n    _notifyObserver(observer) {\n        const externalState = taskStateFromInternalTaskState(this._state);\n        switch(externalState){\n            case TaskState.RUNNING:\n            case TaskState.PAUSED:\n                if (observer.next) async(observer.next.bind(observer, this.snapshot))();\n                break;\n            case TaskState.SUCCESS:\n                if (observer.complete) async(observer.complete.bind(observer))();\n                break;\n            case TaskState.CANCELED:\n            case TaskState.ERROR:\n                if (observer.error) async(observer.error.bind(observer, this._error))();\n                break;\n            default:\n                // TODO(andysoto): assert(false);\n                if (observer.error) async(observer.error.bind(observer, this._error))();\n        }\n    }\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */ resume() {\n        const valid = this._state === \"paused\" /* InternalTaskState.PAUSED */  || this._state === \"pausing\" /* InternalTaskState.PAUSING */ ;\n        if (valid) this._transition(\"running\" /* InternalTaskState.RUNNING */ );\n        return valid;\n    }\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */ pause() {\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */ ;\n        if (valid) this._transition(\"pausing\" /* InternalTaskState.PAUSING */ );\n        return valid;\n    }\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */ cancel() {\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */  || this._state === \"pausing\" /* InternalTaskState.PAUSING */ ;\n        if (valid) this._transition(\"canceling\" /* InternalTaskState.CANCELING */ );\n        return valid;\n    }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */ class Reference {\n    constructor(_service, location){\n        this._service = _service;\n        if (location instanceof Location) this._location = location;\n        else this._location = Location.makeFromUrl(location, _service.host);\n    }\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */ toString() {\n        return \"gs://\" + this._location.bucket + \"/\" + this._location.path;\n    }\n    _newRef(service, location) {\n        return new Reference(service, location);\n    }\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */ get root() {\n        const location = new Location(this._location.bucket, \"\");\n        return this._newRef(this._service, location);\n    }\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */ get bucket() {\n        return this._location.bucket;\n    }\n    /**\r\n     * The full path of this object.\r\n     */ get fullPath() {\n        return this._location.path;\n    }\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */ get name() {\n        return lastComponent(this._location.path);\n    }\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */ get storage() {\n        return this._service;\n    }\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */ get parent() {\n        const newPath = parent(this._location.path);\n        if (newPath === null) return null;\n        const location = new Location(this._location.bucket, newPath);\n        return new Reference(this._service, location);\n    }\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */ _throwIfRoot(name) {\n        if (this._location.path === \"\") throw invalidRootOperation(name);\n    }\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */ function getBytesInternal(ref, maxDownloadSizeBytes) {\n    ref._throwIfRoot(\"getBytes\");\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n    return ref.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then((bytes)=>maxDownloadSizeBytes !== undefined ? bytes.slice(0, maxDownloadSizeBytes) : bytes);\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */ function getBlobInternal(ref, maxDownloadSizeBytes) {\n    ref._throwIfRoot(\"getBlob\");\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n    return ref.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then((blob)=>maxDownloadSizeBytes !== undefined ? blob.slice(0, maxDownloadSizeBytes) : blob);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */ function uploadBytes$1(ref, data, metadata) {\n    ref._throwIfRoot(\"uploadBytes\");\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then((finalMetadata)=>{\n        return {\n            metadata: finalMetadata,\n            ref\n        };\n    });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */ function uploadBytesResumable$1(ref, data, metadata) {\n    ref._throwIfRoot(\"uploadBytesResumable\");\n    return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */ function uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\n    ref._throwIfRoot(\"uploadString\");\n    const data = dataFromString(format, value);\n    const metadataClone = Object.assign({}, metadata);\n    if (metadataClone[\"contentType\"] == null && data.contentType != null) metadataClone[\"contentType\"] = data.contentType;\n    return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */ function listAll$1(ref) {\n    const accumulator = {\n        prefixes: [],\n        items: []\n    };\n    return listAllHelper(ref, accumulator).then(()=>accumulator);\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */ async function listAllHelper(ref, accumulator, pageToken) {\n    const opt = {\n        // maxResults is 1000 by default.\n        pageToken\n    };\n    const nextPage = await list$1(ref, opt);\n    accumulator.prefixes.push(...nextPage.prefixes);\n    accumulator.items.push(...nextPage.items);\n    if (nextPage.nextPageToken != null) await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */ function list$1(ref, options) {\n    if (options != null) {\n        if (typeof options.maxResults === \"number\") validateNumber(\"options.maxResults\", /* minValue= */ 1, /* maxValue= */ 1000, options.maxResults);\n    }\n    const op = options || {};\n    const requestInfo = list$2(ref.storage, ref._location, /*delimiter= */ \"/\", op.pageToken, op.maxResults);\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */ function getMetadata$1(ref) {\n    ref._throwIfRoot(\"getMetadata\");\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */ function updateMetadata$1(ref, metadata) {\n    ref._throwIfRoot(\"updateMetadata\");\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */ function getDownloadURL$1(ref) {\n    ref._throwIfRoot(\"getDownloadURL\");\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then((url)=>{\n        if (url === null) throw noDownloadURL();\n        return url;\n    });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */ function deleteObject$1(ref) {\n    ref._throwIfRoot(\"deleteObject\");\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */ function _getChild$1(ref, childPath) {\n    const newPath = child(ref._location.path, childPath);\n    const location = new Location(ref._location.bucket, newPath);\n    return new Reference(ref.storage, location);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function isUrl(path) {\n    return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */ function refFromURL(service, url) {\n    return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */ function refFromPath(ref, path) {\n    if (ref instanceof FirebaseStorageImpl) {\n        const service = ref;\n        if (service._bucket == null) throw noDefaultBucket();\n        const reference = new Reference(service, service._bucket);\n        if (path != null) return refFromPath(reference, path);\n        else return reference;\n    } else {\n        // ref is a Reference\n        if (path !== undefined) return _getChild$1(ref, path);\n        else return ref;\n    }\n}\nfunction ref$1(serviceOrRef, pathOrUrl) {\n    if (pathOrUrl && isUrl(pathOrUrl)) {\n        if (serviceOrRef instanceof FirebaseStorageImpl) return refFromURL(serviceOrRef, pathOrUrl);\n        else throw invalidArgument(\"To use ref(service, url), the first argument must be a Storage instance.\");\n    } else return refFromPath(serviceOrRef, pathOrUrl);\n}\nfunction extractBucket(host, config) {\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n    if (bucketString == null) return null;\n    return Location.makeFromBucketSpec(bucketString, host);\n}\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\n    storage.host = `${host}:${port}`;\n    storage._protocol = \"http\";\n    const { mockUserToken } = options;\n    if (mockUserToken) storage._overrideAuthToken = typeof mockUserToken === \"string\" ? mockUserToken : (0, _util.createMockUserToken)(mockUserToken, storage.app.options.projectId);\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */ class FirebaseStorageImpl {\n    constructor(/**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */ app, _authProvider, /**\r\n     * @internal\r\n     */ _appCheckProvider, /**\r\n     * @internal\r\n     */ _url, _firebaseVersion){\n        this.app = app;\n        this._authProvider = _authProvider;\n        this._appCheckProvider = _appCheckProvider;\n        this._url = _url;\n        this._firebaseVersion = _firebaseVersion;\n        this._bucket = null;\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */ this._host = DEFAULT_HOST;\n        this._protocol = \"https\";\n        this._appId = null;\n        this._deleted = false;\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n        this._requests = new Set();\n        if (_url != null) this._bucket = Location.makeFromBucketSpec(_url, this._host);\n        else this._bucket = extractBucket(this._host, this.app.options);\n    }\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */ get host() {\n        return this._host;\n    }\n    set host(host) {\n        this._host = host;\n        if (this._url != null) this._bucket = Location.makeFromBucketSpec(this._url, host);\n        else this._bucket = extractBucket(host, this.app.options);\n    }\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */ get maxUploadRetryTime() {\n        return this._maxUploadRetryTime;\n    }\n    set maxUploadRetryTime(time) {\n        validateNumber(\"time\", /* minValue=*/ 0, /* maxValue= */ Number.POSITIVE_INFINITY, time);\n        this._maxUploadRetryTime = time;\n    }\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */ get maxOperationRetryTime() {\n        return this._maxOperationRetryTime;\n    }\n    set maxOperationRetryTime(time) {\n        validateNumber(\"time\", /* minValue=*/ 0, /* maxValue= */ Number.POSITIVE_INFINITY, time);\n        this._maxOperationRetryTime = time;\n    }\n    async _getAuthToken() {\n        if (this._overrideAuthToken) return this._overrideAuthToken;\n        const auth = this._authProvider.getImmediate({\n            optional: true\n        });\n        if (auth) {\n            const tokenData = await auth.getToken();\n            if (tokenData !== null) return tokenData.accessToken;\n        }\n        return null;\n    }\n    async _getAppCheckToken() {\n        const appCheck = this._appCheckProvider.getImmediate({\n            optional: true\n        });\n        if (appCheck) {\n            const result = await appCheck.getToken();\n            // TODO: What do we want to do if there is an error getting the token?\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n            // the token (actual or dummy) to send requests.\n            return result.token;\n        }\n        return null;\n    }\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */ _delete() {\n        if (!this._deleted) {\n            this._deleted = true;\n            this._requests.forEach((request)=>request.cancel());\n            this._requests.clear();\n        }\n        return Promise.resolve();\n    }\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */ _makeStorageReference(loc) {\n        return new Reference(this, loc);\n    }\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */ _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\n        if (!this._deleted) {\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\n            this._requests.add(request);\n            // Request removes itself from set when complete.\n            request.getPromise().then(()=>this._requests.delete(request), ()=>this._requests.delete(request));\n            return request;\n        } else return new FailRequest(appDeleted());\n    }\n    async makeRequestWithTokens(requestInfo, requestFactory) {\n        const [authToken, appCheckToken] = await Promise.all([\n            this._getAuthToken(),\n            this._getAppCheckToken()\n        ]);\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\n    }\n}\nconst name = \"@firebase/storage\";\nconst version = \"0.12.3\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Type constant for Firebase Storage.\r\n */ const STORAGE_TYPE = \"storage\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */ function getBytes(ref, maxDownloadSizeBytes) {\n    ref = (0, _util.getModularInstance)(ref);\n    return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */ function uploadBytes(ref, data, metadata) {\n    ref = (0, _util.getModularInstance)(ref);\n    return uploadBytes$1(ref, data, metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */ function uploadString(ref, value, format, metadata) {\n    ref = (0, _util.getModularInstance)(ref);\n    return uploadString$1(ref, value, format, metadata);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */ function uploadBytesResumable(ref, data, metadata) {\n    ref = (0, _util.getModularInstance)(ref);\n    return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */ function getMetadata(ref) {\n    ref = (0, _util.getModularInstance)(ref);\n    return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */ function updateMetadata(ref, metadata) {\n    ref = (0, _util.getModularInstance)(ref);\n    return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */ function list(ref, options) {\n    ref = (0, _util.getModularInstance)(ref);\n    return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */ function listAll(ref) {\n    ref = (0, _util.getModularInstance)(ref);\n    return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */ function getDownloadURL(ref) {\n    ref = (0, _util.getModularInstance)(ref);\n    return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */ function deleteObject(ref) {\n    ref = (0, _util.getModularInstance)(ref);\n    return deleteObject$1(ref);\n}\nfunction ref(serviceOrRef, pathOrUrl) {\n    serviceOrRef = (0, _util.getModularInstance)(serviceOrRef);\n    return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */ function _getChild(ref, childPath) {\n    return _getChild$1(ref, childPath);\n}\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */ function getStorage(app = (0, _app.getApp)(), bucketUrl) {\n    app = (0, _util.getModularInstance)(app);\n    const storageProvider = (0, _app._getProvider)(app, STORAGE_TYPE);\n    const storageInstance = storageProvider.getImmediate({\n        identifier: bucketUrl\n    });\n    const emulator = (0, _util.getDefaultEmulatorHostnameAndPort)(\"storage\");\n    if (emulator) connectStorageEmulator(storageInstance, ...emulator);\n    return storageInstance;\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */ function connectStorageEmulator(storage, host, port, options = {}) {\n    connectStorageEmulator$1(storage, host, port, options);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */ function getBlob(ref, maxDownloadSizeBytes) {\n    ref = (0, _util.getModularInstance)(ref);\n    return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */ function getStream(ref, maxDownloadSizeBytes) {\n    throw new Error(\"getStream() is only supported by NodeJS builds\");\n}\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */ function factory(container, { instanceIdentifier: url }) {\n    const app = container.getProvider(\"app\").getImmediate();\n    const authProvider = container.getProvider(\"auth-internal\");\n    const appCheckProvider = container.getProvider(\"app-check-internal\");\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, (0, _app.SDK_VERSION));\n}\nfunction registerStorage() {\n    (0, _app._registerComponent)(new (0, _component.Component)(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */ ).setMultipleInstances(true));\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n    (0, _app.registerVersion)(name, version, \"\");\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n    (0, _app.registerVersion)(name, version, \"esm2017\");\n}\nregisterStorage();\n\n},{\"@firebase/app\":\"3eFbF\",\"@firebase/util\":\"hGlpW\",\"@firebase/component\":\"7Ufrc\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}]},[], null, \"parcelRequire4d19\")\n\n//# sourceMappingURL=creator.1d22ea61.js.map\n","import { createElement } from \"../../components/element/element\";\r\nimport { getTagsLabel } from \"../../components/tagsLabel/tagsLabel\";\r\n\r\nimport { authModal, getTagList, getUserName, getUserToken, isAuth, realdb } from \"../../main\";\r\nimport \"./creator.css\"\r\nimport { getDatabase, ref, set, child, get, update, remove } from \"firebase/database\";\r\nimport { getStorage, ref as sRef, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\n\r\nexport function getCreatorPage() {\r\n    let Files = [];\r\n    let FileReaders = [];\r\n    let imagesLinksArray = [];\r\n\r\n    const randomId = () => {\r\n        return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n    };\r\n\r\n    let currentId = randomId();\r\n\r\n    const page = createElement('section', 'creator', 'section-padding');\r\n    const chapter = createElement('div', 'creator__chapter');\r\n\r\n    const title = createElement('h3', 'section__title', 'creator__title');\r\n    title.innerText = 'Создать мем';\r\n    const descr = createElement('p', 'creator__descr');\r\n    descr.innerText = 'Здесь можно создать свой мем!';\r\n\r\n    const form = createElement('form', 'creator__form');\r\n    const titleLabel = createElement('label', 'creator__label');\r\n    titleLabel.innerText = 'Название мема';\r\n    const titleInput = createElement('input', 'creator__input', 'creator__input--name');\r\n    titleInput.required ='required';\r\n\r\n    const authorLabel = createElement('label', 'creator__label');\r\n    authorLabel.innerText = 'Ник автора';\r\n    const authorInput = createElement('input', 'creator__input', 'creator__input--author');\r\n    authorInput.value = getUserName();\r\n    authorInput.setAttribute('readonly', 'true');\r\n\r\n    const textLabel = createElement('label', 'creator__label');\r\n    textLabel.innerText = 'Текст';\r\n    const textInput = createElement('textarea', 'creator__input', 'creator__input--text');\r\n\r\n    const imagesBlock = createElement('div', 'images__block');\r\n    const imagesDiv = createElement('div', 'images__div');\r\n    const chooseImage = createElement('button', 'creator__choose', 'btn');\r\n    chooseImage.type = 'button';\r\n    const laodLab = createElement('label', 'creator__loading');\r\n    const progressText = createElement('div', 'images__progress');\r\n\r\n    const tagsEl = getTagsLabel();\r\n    \r\n\r\n    function getProgress() {\r\n        progressText.innerText = `Добавлено картинок: ${Files.length}/10`;\r\n    }\r\n\r\n    chooseImage.innerText = 'Добавить каринку';\r\n\r\n\r\n    const submitBtn = createElement('button', 'creator__submit', 'btn');\r\n    submitBtn.type = 'submit';\r\n    submitBtn.innerText = 'Создать';\r\n\r\n    if (imagesDiv.innerHTML === '') {\r\n        imagesDiv.innerHTML = 'Картинки'\r\n    }\r\n\r\n\r\n    titleLabel.append(titleInput);\r\n    authorLabel.append(authorInput);\r\n    textLabel.append(textInput);\r\n    imagesBlock.append(imagesDiv, laodLab, progressText, chooseImage);\r\n\r\n    form.append(titleLabel, authorLabel, textLabel, tagsEl.tagsLabel, imagesBlock, submitBtn);\r\n    chapter.append(title, descr);\r\n\r\n    chooseImage.addEventListener('click', function(event) {\r\n        event.preventDefault();\r\n        openFileDialog();\r\n    });\r\n\r\n    function openFileDialog() {\r\n        let input = document.createElement('input');\r\n        input.type = 'file';\r\n        // input.multiple = 'multiple';\r\n    \r\n        input.onchange = (e) => {\r\n            assignImgsToFilesArray(e.target.files);\r\n            createImgTags();\r\n        }\r\n    \r\n        input.click();\r\n    }\r\n\r\n    function assignImgsToFilesArray(thisFiles) {\r\n        let num = Files.length + thisFiles.length;\r\n        let loopLim = (num <= 10) ? thisFiles.length : (10 - Files.length);\r\n        \r\n        for (let i = 0; i < loopLim; i++) {\r\n            Files.push(thisFiles[i]);\r\n        }\r\n    \r\n        if (num > 10) alert('!!!');\r\n\r\n\r\n        getProgress();\r\n    }\r\n    \r\n    function createImgTags() {\r\n        imagesDiv.innerHTML = '';\r\n    \r\n        for (let i = 0; i < Files.length; i++) {\r\n            (function(index) {\r\n                FileReaders[index] = new FileReader();\r\n    \r\n                FileReaders[index].onload = function() {\r\n                    let img = document.createElement('img');\r\n    \r\n                    img.id = `img-${index}`;\r\n                    img.classList.add('choose__img');\r\n                    img.src = FileReaders[index].result;\r\n                    imagesDiv.append(img);\r\n                }\r\n    \r\n                FileReaders[index].readAsDataURL(Files[index]);\r\n            })(i);\r\n        }\r\n        let lab = document.createElement('label');\r\n        lab.innerHTML = 'Очистить';\r\n        lab.style = 'cursor:pointer;display:block; color: navy; font-size: 12px;';\r\n        lab.addEventListener('click', clearImage)\r\n        imagesDiv.append(lab);\r\n    };\r\n    \r\n    function clearImage() {\r\n        Files = [];\r\n        imagesLinksArray = [];\r\n        imagesDiv.innerHTML = 'Картики';\r\n\r\n        getProgress();  \r\n    }\r\n\r\n    function getImgUploadProgress() {\r\n        return 'Imgs upload ' + imagesLinksArray.length + ' of ' + Files.length;\r\n    }\r\n    \r\n    function isAllImagesUpload() {\r\n        return imagesLinksArray.length == Files.length;\r\n    }\r\n\r\n    function uploadAllImages() {\r\n        imagesLinksArray = [];\r\n    \r\n        for (let i = 0; i < Files.length; i++) {\r\n            uploadImageToStorage(Files[i]);\r\n        }\r\n    }\r\n    \r\n    function uploadImageToStorage(imgToUpload) {\r\n        const imgNo = Files.indexOf(imgToUpload); \r\n\r\n    \r\n        const metadata = {\r\n            contentType: imgToUpload.type\r\n        };\r\n    \r\n        const storage = getStorage();\r\n    \r\n        const imgAddress = \"TheImages/\" + currentId + \"/img#\" + (imgNo + 1);\r\n    \r\n        const storageRef = sRef(storage, imgAddress);\r\n    \r\n        const uploadTask = uploadBytesResumable(storageRef, imgToUpload, metadata);\r\n    \r\n        uploadTask.on('state_changed', (snapshot) => {\r\n            laodLab.innerHTML = getImgUploadProgress();\r\n        },\r\n    \r\n        (error) => {\r\n            alert('error');\r\n        },\r\n    \r\n        () => {\r\n            getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                imagesLinksArray[imgNo] = downloadURL;\r\n    \r\n                if (isAllImagesUpload()) {\r\n                    laodLab.innerHTML = 'all loaded';\r\n                    uploadItem();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    \r\n\r\n    const realdb = getDatabase();\r\n\r\n\r\n    let date = new Date();\r\n    date = date.toLocaleString();\r\n\r\n    function clearValues() {\r\n        submitBtn.disabled = false;\r\n        textInput.value = '';\r\n        titleInput.value = '';\r\n        clearImage();\r\n    }\r\n\r\n    function uploadItem() {\r\n        const load = document.querySelector('.load');\r\n        set(ref(realdb, \"MemItems/\" + currentId), {\r\n            id: currentId,\r\n            title: titleInput.value,\r\n            text: textInput.value,\r\n            userName: authorInput.value,\r\n            userToken: getUserToken(),\r\n            date: date,\r\n            likes: 0,\r\n            linksOfImagesArray: imagesLinksArray,\r\n            tags: tagsEl.targetTags\r\n        }).then(() => {\r\n            tagsEl.targetTags = [];\r\n            tagsEl.getCheckedTags(tagsEl.targetTags);\r\n            load.classList.add('loaded');\r\n            load.style.display = 'none';\r\n            clearValues();\r\n            alert('Мем опубликован!');\r\n            \r\n        })\r\n    }\r\n\r\n    form.addEventListener('submit', function(event) {\r\n        event.preventDefault();\r\n        if (isAuth()) {\r\n            const load = document.querySelector('.load');\r\n            event.disabled = true;\r\n            \r\n\r\n            load.classList.remove('loaded');\r\n            load.style.display = 'grid';\r\n\r\n            if (Files.length === 0) {\r\n                uploadItem();\r\n                clearValues();\r\n                return;\r\n            }\r\n\r\n            uploadAllImages();\r\n        } else {\r\n            authModal.openAuthModal();\r\n        }\r\n    });\r\n\r\n    if (authorInput.value !== '') {\r\n        authorInput.classList.add('readonly');\r\n    }\r\n\r\n    page.append(chapter, form);\r\n    return page;\r\n}","import { getTagList } from \"../../main\";\r\nimport { createElement } from \"../element/element\";\r\nimport './tagsLabel.css';\r\n\r\nexport function getTagsLabel() {\r\n    const tagsLabel = createElement('label', 'tags__label');\r\n    const selectBtn = createElement('div', 'select-btn');\r\n    const textBtn = createElement('span', 'btn-text');\r\n    const checkedList = createElement('ul', 'tags__checked', 'list-reset');\r\n    textBtn.innerText = 'Добавить тэги (не более 3):';\r\n    const arrowBtn = createElement('span', 'arrow-down');\r\n    arrowBtn.insertAdjacentHTML('beforeend', `<svg width=\"14\" height=\"8\" viewBox=\"0 0 14 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M1 1L7 7L13 1\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    </svg>`);\r\n\r\n    let targetTags = [];\r\n    const tagBox = createElement('div', 'tags__box');\r\n    const tagList = createElement('ul', 'tags__items');\r\n    const tagSearch = createElement('input', 'tags__search');\r\n    tagSearch.type = 'text';\r\n    tagSearch.placeholder = 'Поиск по названию';\r\n    const list = getTagList();\r\n\r\n    let tagCount = 0;\r\n    list.forEach(tag => {\r\n        \r\n        const temp = createElement('li', 'tag');\r\n        temp.setAttribute('data-value', tag);\r\n        temp.setAttribute('data-id', tagCount);\r\n        const name = createElement('span', 'tag__text');\r\n        name.innerText = tag;\r\n        temp.append(name);\r\n        tagList.append(temp);\r\n\r\n        temp.addEventListener('click', () => {\r\n            if ((!temp.classList.contains('checked')) && (targetTags.length <= 2)) {\r\n                targetTags.push(\r\n                    {\r\n                        id : temp.dataset.id,\r\n                        value: temp.dataset.value\r\n                    }\r\n                );\r\n                temp.classList.add('checked');\r\n                let tagsArray = targetTags;\r\n                getCheckedTags(tagsArray);\r\n                getCurrentTags();\r\n            }\r\n            \r\n        })\r\n\r\n        tagCount++;\r\n    });\r\n\r\n    function getCurrentTags() {\r\n        return targetTags;\r\n    }\r\n\r\n    function resetTag(id) {\r\n        const items = document.querySelectorAll('.tag');\r\n        \r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].dataset.id === id) {\r\n                items[i].classList.remove('checked');\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCheckedTags(tagsArray) {\r\n        checkedList.innerHTML = '';\r\n        tagsArray.forEach(tag => {\r\n            const {id, value} = tag;\r\n            const item = createElement('li', 'checked-tag');\r\n            const name = createElement('span');\r\n            name.innerText = value;\r\n            const removeBtn = createElement('div', 'checked-tag__remove');\r\n            removeBtn.insertAdjacentHTML('beforeend', `<svg width=\"15\" height=\"14\" viewBox=\"0 0 15 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M1.63603 12.364L12.9497 1.05024\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n            <path d=\"M2 1L13.3137 12.3137\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n            </svg>\r\n            `)\r\n            removeBtn.addEventListener('click', (event) => removeCheckedTag(event));\r\n            item.append(name, removeBtn);\r\n            item.setAttribute('data-value', value);\r\n            item.setAttribute('data-id', id);\r\n\r\n            checkedList.append(item);\r\n        })\r\n        \r\n    }\r\n\r\n    function removeCheckedTag(event) {\r\n        const currentTag = event.target.closest('li');\r\n        const currentId = currentTag.dataset.id;\r\n\r\n        for (let i = 0; i < targetTags.length; i++) {\r\n            if (targetTags[i].id === currentId) {\r\n                targetTags.splice(i , 1);\r\n                let tagsArray = targetTags;\r\n                getCheckedTags(tagsArray);\r\n                resetTag(currentId);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function listIsEmpty() {\r\n        if (tagList.innerHTML == '') {\r\n            const tagListMessage = createElement('span');\r\n            tagListMessage.innerText = 'Такого тэга не найдено';\r\n            tagList.append(tagListMessage);\r\n        }\r\n    }\r\n\r\n    selectBtn.append(textBtn, arrowBtn);\r\n    tagBox.append(tagSearch, tagList)\r\n\r\n    tagsLabel.append(selectBtn, tagBox, checkedList);\r\n\r\n    tagSearch.addEventListener('input', () => {\r\n        const tags = document.querySelectorAll('.tag');\r\n        let { value } = tagSearch;\r\n        \r\n        for (let i = 0; i < tags.length; i++) {\r\n            if (!tags[i].dataset.value.includes(value)) {\r\n                tags[i].classList.add('hidden');\r\n            } else {\r\n                tags[i].classList.remove('hidden');\r\n            }\r\n        }\r\n\r\n        listIsEmpty();\r\n    });\r\n\r\n    selectBtn.addEventListener('click', () => {\r\n        selectBtn.classList.toggle('open');\r\n    });\r\n\r\n    document.addEventListener('click', (event) => {\r\n        const selectBtn = document.querySelector('.select-btn');\r\n        const tagsLabel = document.querySelector('.tags__label');\r\n        \r\n        if (selectBtn && !selectBtn.contains(event.target) && !tagsLabel.contains(event.target)) {\r\n            selectBtn.classList.remove('open');\r\n        }\r\n    });\r\n\r\n    return {tagsLabel, targetTags, getCurrentTags, getCheckedTags};\r\n}\r\n","export * from '@firebase/storage';\n//# sourceMappingURL=index.esm.js.map\n","import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain name for firebase storage.\r\n */\r\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\r\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\r\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\r\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\r\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\r\n/**\r\n * 1 second\r\n */\r\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\r\nclass StorageError extends FirebaseError {\r\n    /**\r\n     * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     * @param status_ - Corresponding HTTP Status Code\r\n     */\r\n    constructor(code, message, status_ = 0) {\r\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\r\n        this.status_ = status_;\r\n        /**\r\n         * Stores custom error data unique to the `StorageError`.\r\n         */\r\n        this.customData = { serverResponse: null };\r\n        this._baseMessage = this.message;\r\n        // Without this, `instanceof StorageError`, in tests for example,\r\n        // returns false.\r\n        Object.setPrototypeOf(this, StorageError.prototype);\r\n    }\r\n    get status() {\r\n        return this.status_;\r\n    }\r\n    set status(status) {\r\n        this.status_ = status;\r\n    }\r\n    /**\r\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n     */\r\n    _codeEquals(code) {\r\n        return prependCode(code) === this.code;\r\n    }\r\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\r\n    get serverResponse() {\r\n        return this.customData.serverResponse;\r\n    }\r\n    set serverResponse(serverResponse) {\r\n        this.customData.serverResponse = serverResponse;\r\n        if (this.customData.serverResponse) {\r\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\r\n        }\r\n        else {\r\n            this.message = this._baseMessage;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\r\nvar StorageErrorCode;\r\n(function (StorageErrorCode) {\r\n    // Shared between all platforms\r\n    StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\r\n    StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\r\n    StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\r\n    StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\r\n    StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\r\n    StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\r\n    StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\r\n    StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\r\n    StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\r\n    StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\r\n    StorageErrorCode[\"CANCELED\"] = \"canceled\";\r\n    // JS specific\r\n    StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\r\n    StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\r\n    StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\r\n    StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\r\n    StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\r\n    StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\r\n    StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\r\n    StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\r\n    StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\r\n    StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\r\n    StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\r\n    StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\r\n})(StorageErrorCode || (StorageErrorCode = {}));\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    const message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new StorageError(StorageErrorCode.UNKNOWN, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\r\n}\r\nfunction unauthorizedApp() {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\r\n}\r\nfunction unauthorized(path) {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction noDefaultBucket() {\r\n    return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' +\r\n        \"found. Did you set the '\" +\r\n        CONFIG_STORAGE_BUCKET_KEY +\r\n        \"' property when initializing the app?\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\r\n}\r\nfunction missingPolyFill(polyFill) {\r\n    return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction invalidArgument(message) {\r\n    return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\r\n}\r\nfunction appDeleted() {\r\n    return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message - A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\r\nclass Location {\r\n    constructor(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    get path() {\r\n        return this.path_;\r\n    }\r\n    get isRoot() {\r\n        return this.path.length === 0;\r\n    }\r\n    fullServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    }\r\n    bucketOnlyServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    }\r\n    static makeFromBucketSpec(bucketString, host) {\r\n        let bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString, host);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    }\r\n    static makeFromUrl(url, host) {\r\n        let location = null;\r\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        const gsPath = '(/(.*))?$';\r\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        const gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        const version = 'v[A-Za-z0-9_]+';\r\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\r\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\r\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\r\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\r\n        const cloudStorageHost = host === DEFAULT_HOST\r\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\r\n            : host;\r\n        const cloudStoragePath = '([^?#]*)';\r\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\r\n        const cloudStorageIndices = { bucket: 1, path: 2 };\r\n        const groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            {\r\n                regex: firebaseStorageRegExp,\r\n                indices: firebaseStorageIndices,\r\n                postModify: httpModify\r\n            },\r\n            {\r\n                regex: cloudStorageRegExp,\r\n                indices: cloudStorageIndices,\r\n                postModify: httpModify\r\n            }\r\n        ];\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            const captures = group.regex.exec(url);\r\n            if (captures) {\r\n                const bucketValue = captures[group.indices.bucket];\r\n                let pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    }\r\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\r\nclass FailRequest {\r\n    constructor(error) {\r\n        this.promise_ = Promise.reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(_appDelete = false) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\r\nfunction start(doRequest, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nbackoffCompleteCb, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    let waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let retryTimeoutId = null;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let globalTimeoutId = null;\r\n    let hitTimeout = false;\r\n    let cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    let triggeredCallback = false;\r\n    function triggerCallback(...args) {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            backoffCompleteCb.apply(null, args);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        retryTimeoutId = setTimeout(() => {\r\n            retryTimeoutId = null;\r\n            doRequest(responseHandler, canceled());\r\n        }, millis);\r\n    }\r\n    function clearGlobalTimeout() {\r\n        if (globalTimeoutId) {\r\n            clearTimeout(globalTimeoutId);\r\n        }\r\n    }\r\n    function responseHandler(success, ...args) {\r\n        if (triggeredCallback) {\r\n            clearGlobalTimeout();\r\n            return;\r\n        }\r\n        if (success) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        const mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        let waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    let stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        clearGlobalTimeout();\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (retryTimeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(retryTimeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    globalTimeoutId = setTimeout(() => {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return typeof p === 'object' && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    return typeof Blob !== 'undefined';\r\n}\r\nfunction validateNumber(argument, minValue, maxValue, value) {\r\n    if (value < minValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\r\n    }\r\n    if (value > maxValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeUrl(urlPart, host, protocol) {\r\n    let origin = host;\r\n    if (protocol == null) {\r\n        origin = `https://${host}`;\r\n    }\r\n    return `${protocol}://${origin}/v0${urlPart}`;\r\n}\r\nfunction makeQueryString(params) {\r\n    const encode = encodeURIComponent;\r\n    let queryPart = '?';\r\n    for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n            const nextPart = encode(key) + '=' + encode(params[key]);\r\n            queryPart = queryPart + nextPart + '&';\r\n        }\r\n    }\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\r\nfunction isRetryStatusCode(status, additionalRetryCodes) {\r\n    // The codes for which to retry came from this page:\r\n    // https://cloud.google.com/storage/docs/exponential-backoff\r\n    const isFiveHundredCode = status >= 500 && status < 600;\r\n    const extraRetryCodes = [\r\n        // Request Timeout: web server didn't receive full request in time.\r\n        408,\r\n        // Too Many Requests: you're getting rate-limited, basically.\r\n        429\r\n    ];\r\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\r\n    const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\r\n    return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\r\nclass NetworkRequest {\r\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\r\n        this.url_ = url_;\r\n        this.method_ = method_;\r\n        this.headers_ = headers_;\r\n        this.body_ = body_;\r\n        this.successCodes_ = successCodes_;\r\n        this.additionalRetryCodes_ = additionalRetryCodes_;\r\n        this.callback_ = callback_;\r\n        this.errorCallback_ = errorCallback_;\r\n        this.timeout_ = timeout_;\r\n        this.progressCallback_ = progressCallback_;\r\n        this.connectionFactory_ = connectionFactory_;\r\n        this.retry = retry;\r\n        this.pendingConnection_ = null;\r\n        this.backoffId_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.promise_ = new Promise((resolve, reject) => {\r\n            this.resolve_ = resolve;\r\n            this.reject_ = reject;\r\n            this.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    start_() {\r\n        const doTheRequest = (backoffCallback, canceled) => {\r\n            if (canceled) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            const connection = this.connectionFactory_();\r\n            this.pendingConnection_ = connection;\r\n            const progressListener = progressEvent => {\r\n                const loaded = progressEvent.loaded;\r\n                const total = progressEvent.lengthComputable ? progressEvent.total : -1;\r\n                if (this.progressCallback_ !== null) {\r\n                    this.progressCallback_(loaded, total);\r\n                }\r\n            };\r\n            if (this.progressCallback_ !== null) {\r\n                connection.addUploadProgressListener(progressListener);\r\n            }\r\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            connection\r\n                .send(this.url_, this.method_, this.body_, this.headers_)\r\n                .then(() => {\r\n                if (this.progressCallback_ !== null) {\r\n                    connection.removeUploadProgressListener(progressListener);\r\n                }\r\n                this.pendingConnection_ = null;\r\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\r\n                const status = connection.getStatus();\r\n                if (!hitServer ||\r\n                    (isRetryStatusCode(status, this.additionalRetryCodes_) &&\r\n                        this.retry)) {\r\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                const successCode = this.successCodes_.indexOf(status) !== -1;\r\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\r\n            });\r\n        };\r\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        const backoffDone = (requestWentThrough, status) => {\r\n            const resolve = this.resolve_;\r\n            const reject = this.reject_;\r\n            const connection = status.connection;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    const result = this.callback_(connection, connection.getResponse());\r\n                    if (isJustDef(result)) {\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                if (connection !== null) {\r\n                    const err = unknown();\r\n                    err.serverResponse = connection.getErrorText();\r\n                    if (this.errorCallback_) {\r\n                        reject(this.errorCallback_(connection, err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        const err = this.appDelete_ ? appDeleted() : canceled();\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        const err = retryLimitExceeded();\r\n                        reject(err);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingConnection_ !== null) {\r\n            this.pendingConnection_.abort();\r\n        }\r\n    }\r\n}\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\r\nclass RequestEndStatus {\r\n    constructor(wasSuccessCode, connection, canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.connection = connection;\r\n        this.canceled = !!canceled;\r\n    }\r\n}\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers, firebaseVersion) {\r\n    headers['X-Firebase-Storage-Version'] =\r\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\r\n}\r\nfunction addGmpidHeader_(headers, appId) {\r\n    if (appId) {\r\n        headers['X-Firebase-GMPID'] = appId;\r\n    }\r\n}\r\nfunction addAppCheckHeader_(headers, appCheckToken) {\r\n    if (appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = appCheckToken;\r\n    }\r\n}\r\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\r\n    const queryPart = makeQueryString(requestInfo.urlParams);\r\n    const url = requestInfo.url + queryPart;\r\n    const headers = Object.assign({}, requestInfo.headers);\r\n    addGmpidHeader_(headers, appId);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers, firebaseVersion);\r\n    addAppCheckHeader_(headers, appCheckToken);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob$1(...args) {\r\n    const BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        const bb = new BlobBuilder();\r\n        for (let i = 0; i < args.length; i++) {\r\n            bb.append(args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(args);\r\n        }\r\n        else {\r\n            throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    if (typeof atob === 'undefined') {\r\n        throw missingPolyFill('base-64');\r\n    }\r\n    return atob(encoded);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\r\nconst StringFormat = {\r\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */\r\n    RAW: 'raw',\r\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64: 'base64',\r\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64URL: 'base64url',\r\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */\r\n    DATA_URL: 'data_url'\r\n};\r\nclass StringData {\r\n    constructor(data, contentType) {\r\n        this.data = data;\r\n        this.contentType = contentType || null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction dataFromString(format, stringData) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(stringData));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, stringData));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\r\n        // do nothing\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(value) {\r\n    const b = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n        let c = value.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) === 55296) {\r\n                    // The start of a surrogate pair.\r\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        const hi = c;\r\n                        const lo = value.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) === 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(value) {\r\n    let decoded;\r\n    try {\r\n        decoded = decodeURIComponent(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, value) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            const hasMinus = value.indexOf('-') !== -1;\r\n            const hasUnder = value.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                const invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            const hasPlus = value.indexOf('+') !== -1;\r\n            const hasSlash = value.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                const invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n        // do nothing\r\n    }\r\n    let bytes;\r\n    try {\r\n        bytes = decodeBase64(value);\r\n    }\r\n    catch (e) {\r\n        if (e.message.includes('polyfill')) {\r\n            throw e;\r\n        }\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    const array = new Uint8Array(bytes.length);\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\nclass DataURLParts {\r\n    constructor(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        const matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        const middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n}\r\nfunction dataURLBytes_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    const longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\r\nclass FbsBlob {\r\n    constructor(data, elideCopy) {\r\n        let size = 0;\r\n        let blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    size() {\r\n        return this.size_;\r\n    }\r\n    type() {\r\n        return this.type_;\r\n    }\r\n    slice(startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            const realBlob = this.data_;\r\n            const sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    }\r\n    static getBlob(...args) {\r\n        if (isNativeBlobDefined()) {\r\n            const blobby = args.map((val) => {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob$1.apply(null, blobby));\r\n        }\r\n        else {\r\n            const uint8Arrays = args.map((val) => {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            let finalLength = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                finalLength += array.byteLength;\r\n            });\r\n            const merged = new Uint8Array(finalLength);\r\n            let index = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                for (let i = 0; i < array.length; i++) {\r\n                    merged[index++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged, true);\r\n        }\r\n    }\r\n    uploadData() {\r\n        return this.data_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    let obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    const newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    const canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(component => component.length > 0)\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    const index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\nclass Mapping {\r\n    constructor(server, local, writable, xform) {\r\n        this.server = server;\r\n        this.local = local || server;\r\n        this.writable = !!writable;\r\n        this.xform = xform || noXform_;\r\n    }\r\n}\r\nlet mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    if (!isString(fullPath) || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    const mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(_metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    const nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(_metadata, size) {\r\n        if (size !== undefined) {\r\n            return Number(size);\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    const sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, service) {\r\n    function generateRef() {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const loc = new Location(bucket, path);\r\n        return service._makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(service, resource, mappings) {\r\n    const metadata = {};\r\n    metadata['type'] = 'file';\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, service);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(service, resourceString, mappings) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromResource(service, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    const tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    const encode = encodeURIComponent;\r\n    const tokensList = tokens.split(',');\r\n    const urls = tokensList.map((token) => {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        const base = makeUrl(urlPart, host, protocol);\r\n        const queryString = makeQueryString({\r\n            alt: 'media',\r\n            token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    const resource = {};\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PREFIXES_KEY = 'prefixes';\r\nconst ITEMS_KEY = 'items';\r\nfunction fromBackendResponse(service, bucket, resource) {\r\n    const listResult = {\r\n        prefixes: [],\r\n        items: [],\r\n        nextPageToken: resource['nextPageToken']\r\n    };\r\n    if (resource[PREFIXES_KEY]) {\r\n        for (const path of resource[PREFIXES_KEY]) {\r\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\r\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\r\n            listResult.prefixes.push(reference);\r\n        }\r\n    }\r\n    if (resource[ITEMS_KEY]) {\r\n        for (const item of resource[ITEMS_KEY]) {\r\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\r\n            listResult.items.push(reference);\r\n        }\r\n    }\r\n    return listResult;\r\n}\r\nfunction fromResponseString(service, bucket, resourceString) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromBackendResponse(service, bucket, resource);\r\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\r\nclass RequestInfo {\r\n    constructor(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction listHandler(service, bucket) {\r\n    function handler(xhr, text) {\r\n        const listResult = fromResponseString(service, bucket, text);\r\n        handlerCheck(listResult !== null);\r\n        return listResult;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        let newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            if (\r\n            // This exact message string is the only consistent part of the\r\n            // server's error response that identifies it as an App Check error.\r\n            xhr.getErrorText().includes('Firebase App Check token is invalid')) {\r\n                newErr = unauthorizedApp();\r\n            }\r\n            else {\r\n                newErr = unauthenticated();\r\n            }\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.status = xhr.getStatus();\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    const shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        let newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata$2(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\r\n    const urlParams = {};\r\n    if (location.isRoot) {\r\n        urlParams['prefix'] = '';\r\n    }\r\n    else {\r\n        urlParams['prefix'] = location.path + '/';\r\n    }\r\n    if (delimiter && delimiter.length > 0) {\r\n        urlParams['delimiter'] = delimiter;\r\n    }\r\n    if (pageToken) {\r\n        urlParams['pageToken'] = pageToken;\r\n    }\r\n    if (maxResults) {\r\n        urlParams['maxResults'] = maxResults;\r\n    }\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    if (maxDownloadSizeBytes !== undefined) {\r\n        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\r\n        requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\r\n    }\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata$2(service, location, metadata, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'PATCH';\r\n    const body = toResourceString(metadata, mappings);\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject$2(service, location) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'DELETE';\r\n    const timeout = service.maxOperationRetryTime;\r\n    function handler(_xhr, _text) { }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, metadata) {\r\n    const metadataClone = Object.assign({}, metadata);\r\n    metadataClone['fullPath'] = location.path;\r\n    metadataClone['size'] = blob.size();\r\n    if (!metadataClone['contentType']) {\r\n        metadataClone['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadataClone;\r\n}\r\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\r\nfunction multipartUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        let str = '';\r\n        for (let i = 0; i < 2; i++) {\r\n            str = str + Math.random().toString().slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    const boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    const metadata_ = metadataForUpload_(location, blob, metadata);\r\n    const metadataString = toResourceString(metadata_, mappings);\r\n    const preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata_['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    const postBlobPart = '\\r\\n--' + boundary + '--';\r\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    const urlParams = { name: metadata_['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\r\nclass ResumableUploadStatus {\r\n    constructor(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n}\r\nfunction checkResumeHeader_(xhr, allowed) {\r\n    let status = null;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    const allowedStatus = allowed || ['active'];\r\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\r\n    return status;\r\n}\r\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\r\n    const urlParams = { name: metadataForUpload['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\r\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    const body = toResourceString(metadataForUpload, mappings);\r\n    const timeout = service.maxUploadRetryTime;\r\n    function handler(xhr) {\r\n        checkResumeHeader_(xhr);\r\n        let url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(service, location, url, blob) {\r\n    const headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr) {\r\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        let sizeString = null;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        if (!sizeString) {\r\n            // null or empty string\r\n            handlerCheck(false);\r\n        }\r\n        const size = Number(sizeString);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    const status_ = new ResumableUploadStatus(0, 0);\r\n    if (status) {\r\n        status_.current = status.current;\r\n        status_.total = status.total;\r\n    }\r\n    else {\r\n        status_.current = 0;\r\n        status_.total = blob.size();\r\n    }\r\n    if (blob.size() !== status_.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    const bytesLeft = status_.total - status_.current;\r\n    let bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    const startByte = status_.current;\r\n    const endByte = startByte + bytesToUpload;\r\n    let uploadCommand = '';\r\n    if (bytesToUpload === 0) {\r\n        uploadCommand = 'finalize';\r\n    }\r\n    else if (bytesLeft === bytesToUpload) {\r\n        uploadCommand = 'upload, finalize';\r\n    }\r\n    else {\r\n        uploadCommand = 'upload';\r\n    }\r\n    const headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': `${status_.current}`\r\n    };\r\n    const body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        const newCurrent = status_.current + bytesToUpload;\r\n        const size = blob.size();\r\n        let metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(service, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\r\nconst TaskEvent = {\r\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\n// type keys = keyof TaskState\r\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\r\nconst TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case \"running\" /* InternalTaskState.RUNNING */:\r\n        case \"pausing\" /* InternalTaskState.PAUSING */:\r\n        case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            return TaskState.RUNNING;\r\n        case \"paused\" /* InternalTaskState.PAUSED */:\r\n            return TaskState.PAUSED;\r\n        case \"success\" /* InternalTaskState.SUCCESS */:\r\n            return TaskState.SUCCESS;\r\n        case \"canceled\" /* InternalTaskState.CANCELED */:\r\n            return TaskState.CANCELED;\r\n        case \"error\" /* InternalTaskState.ERROR */:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Observer {\r\n    constructor(nextOrObserver, error, complete) {\r\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = error !== null && error !== void 0 ? error : undefined;\r\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\r\n        }\r\n        else {\r\n            const observer = nextOrObserver;\r\n            this.next = observer.next;\r\n            this.error = observer.error;\r\n            this.complete = observer.complete;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(f) {\r\n    return (...argsToForward) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.resolve().then(() => f(...argsToForward));\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** An override for the text-based Connection. Used in tests. */\r\nlet textFactoryOverride = null;\r\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\r\nclass XhrConnection {\r\n    constructor() {\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.initXhr();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = new Promise(resolve => {\r\n            this.xhr_.addEventListener('abort', () => {\r\n                this.errorCode_ = ErrorCode.ABORT;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('error', () => {\r\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('load', () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    send(url, method, body, headers) {\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (headers !== undefined) {\r\n            for (const key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\r\n                }\r\n            }\r\n        }\r\n        if (body !== undefined) {\r\n            this.xhr_.send(body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    }\r\n    getErrorCode() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    }\r\n    getStatus() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    getResponse() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponse() before sending');\r\n        }\r\n        return this.xhr_.response;\r\n    }\r\n    getErrorText() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorText() before sending');\r\n        }\r\n        return this.xhr_.statusText;\r\n    }\r\n    /** Aborts the request. */\r\n    abort() {\r\n        this.xhr_.abort();\r\n    }\r\n    getResponseHeader(header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    }\r\n    addUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    }\r\n    removeUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    }\r\n}\r\nclass XhrTextConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'text';\r\n    }\r\n}\r\nfunction newTextConnection() {\r\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\r\n}\r\nclass XhrBytesConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'arraybuffer';\r\n    }\r\n}\r\nfunction newBytesConnection() {\r\n    return new XhrBytesConnection();\r\n}\r\nclass XhrBlobConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'blob';\r\n    }\r\n}\r\nfunction newBlobConnection() {\r\n    return new XhrBlobConnection();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\r\nclass UploadTask {\r\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */\r\n    constructor(ref, blob, metadata = null) {\r\n        /**\r\n         * Number of bytes transferred so far.\r\n         */\r\n        this._transferred = 0;\r\n        this._needToFetchStatus = false;\r\n        this._needToFetchMetadata = false;\r\n        this._observers = [];\r\n        this._error = undefined;\r\n        this._uploadUrl = undefined;\r\n        this._request = undefined;\r\n        this._chunkMultiplier = 1;\r\n        this._resolve = undefined;\r\n        this._reject = undefined;\r\n        this._ref = ref;\r\n        this._blob = blob;\r\n        this._metadata = metadata;\r\n        this._mappings = getMappings();\r\n        this._resumable = this._shouldDoResumable(this._blob);\r\n        this._state = \"running\" /* InternalTaskState.RUNNING */;\r\n        this._errorHandler = error => {\r\n            this._request = undefined;\r\n            this._chunkMultiplier = 1;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this._needToFetchStatus = true;\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                const backoffExpired = this.isExponentialBackoffExpired();\r\n                if (isRetryStatusCode(error.status, [])) {\r\n                    if (backoffExpired) {\r\n                        error = retryLimitExceeded();\r\n                    }\r\n                    else {\r\n                        this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\r\n                        this._needToFetchStatus = true;\r\n                        this.completeTransitions_();\r\n                        return;\r\n                    }\r\n                }\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this._metadataErrorHandler = error => {\r\n            this._request = undefined;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this.sleepTime = 0;\r\n        this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n            this._start();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this._promise.then(null, () => { });\r\n    }\r\n    isExponentialBackoffExpired() {\r\n        return this.sleepTime > this.maxSleepTime;\r\n    }\r\n    _makeProgressCallback() {\r\n        const sizeBefore = this._transferred;\r\n        return loaded => this._updateProgress(sizeBefore + loaded);\r\n    }\r\n    _shouldDoResumable(blob) {\r\n        return blob.size() > 256 * 1024;\r\n    }\r\n    _start() {\r\n        if (this._state !== \"running\" /* InternalTaskState.RUNNING */) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this._request !== undefined) {\r\n            return;\r\n        }\r\n        if (this._resumable) {\r\n            if (this._uploadUrl === undefined) {\r\n                this._createResumable();\r\n            }\r\n            else {\r\n                if (this._needToFetchStatus) {\r\n                    this._fetchStatus();\r\n                }\r\n                else {\r\n                    if (this._needToFetchMetadata) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this._fetchMetadata();\r\n                    }\r\n                    else {\r\n                        this.pendingTimeout = setTimeout(() => {\r\n                            this.pendingTimeout = undefined;\r\n                            this._continueUpload();\r\n                        }, this.sleepTime);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._oneShotUpload();\r\n        }\r\n    }\r\n    _resolveToken(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.all([\r\n            this._ref.storage._getAuthToken(),\r\n            this._ref.storage._getAppCheckToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            switch (this._state) {\r\n                case \"running\" /* InternalTaskState.RUNNING */:\r\n                    callback(authToken, appCheckToken);\r\n                    break;\r\n                case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                    this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                    break;\r\n                case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                    this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    // TODO(andysoto): assert false\r\n    _createResumable() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = createRequest;\r\n            createRequest.getPromise().then((url) => {\r\n                this._request = undefined;\r\n                this._uploadUrl = url;\r\n                this._needToFetchStatus = false;\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _fetchStatus() {\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\r\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = statusRequest;\r\n            statusRequest.getPromise().then(status => {\r\n                status = status;\r\n                this._request = undefined;\r\n                this._updateProgress(status.current);\r\n                this._needToFetchStatus = false;\r\n                if (status.finalized) {\r\n                    this._needToFetchMetadata = true;\r\n                }\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _continueUpload() {\r\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            let requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\r\n            }\r\n            catch (e) {\r\n                this._error = e;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n                return;\r\n            }\r\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, \r\n            /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\r\n            );\r\n            this._request = uploadRequest;\r\n            uploadRequest.getPromise().then((newStatus) => {\r\n                this._increaseMultiplier();\r\n                this._request = undefined;\r\n                this._updateProgress(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    this._metadata = newStatus.metadata;\r\n                    this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n                }\r\n                else {\r\n                    this.completeTransitions_();\r\n                }\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _increaseMultiplier() {\r\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        // Max chunk size is 32M.\r\n        if (currentSize * 2 < 32 * 1024 * 1024) {\r\n            this._chunkMultiplier *= 2;\r\n        }\r\n    }\r\n    _fetchMetadata() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\r\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = metadataRequest;\r\n            metadataRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._metadataErrorHandler);\r\n        });\r\n    }\r\n    _oneShotUpload() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = multipartRequest;\r\n            multipartRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._updateProgress(this._blob.size());\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _updateProgress(transferred) {\r\n        const old = this._transferred;\r\n        this._transferred = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this._transferred !== old) {\r\n            this._notifyObservers();\r\n        }\r\n    }\r\n    _transition(state) {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                else if (this.pendingTimeout) {\r\n                    clearTimeout(this.pendingTimeout);\r\n                    this.pendingTimeout = undefined;\r\n                    this.completeTransitions_();\r\n                }\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                const wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */;\r\n                this._state = state;\r\n                if (wasPaused) {\r\n                    this._notifyObservers();\r\n                    this._start();\r\n                }\r\n                break;\r\n            case \"paused\" /* InternalTaskState.PAUSED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"canceled\" /* InternalTaskState.CANCELED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._error = canceled();\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"error\" /* InternalTaskState.ERROR */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"success\" /* InternalTaskState.SUCCESS */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n        }\r\n    }\r\n    completeTransitions_() {\r\n        switch (this._state) {\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                break;\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                this._start();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * A snapshot of the current task state.\r\n     */\r\n    get snapshot() {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        return {\r\n            bytesTransferred: this._transferred,\r\n            totalBytes: this._blob.size(),\r\n            state: externalState,\r\n            metadata: this._metadata,\r\n            task: this,\r\n            ref: this._ref\r\n        };\r\n    }\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\r\n    on(type, nextOrObserver, error, completed) {\r\n        // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\r\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\r\n        this._addObserver(observer);\r\n        return () => {\r\n            this._removeObserver(observer);\r\n        };\r\n    }\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this._promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    _addObserver(observer) {\r\n        this._observers.push(observer);\r\n        this._notifyObserver(observer);\r\n    }\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    _removeObserver(observer) {\r\n        const i = this._observers.indexOf(observer);\r\n        if (i !== -1) {\r\n            this._observers.splice(i, 1);\r\n        }\r\n    }\r\n    _notifyObservers() {\r\n        this._finishPromise();\r\n        const observers = this._observers.slice();\r\n        observers.forEach(observer => {\r\n            this._notifyObserver(observer);\r\n        });\r\n    }\r\n    _finishPromise() {\r\n        if (this._resolve !== undefined) {\r\n            let triggered = true;\r\n            switch (taskStateFromInternalTaskState(this._state)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this._resolve.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    const toCall = this._reject;\r\n                    async(toCall.bind(null, this._error))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this._resolve = undefined;\r\n                this._reject = undefined;\r\n            }\r\n        }\r\n    }\r\n    _notifyObserver(observer) {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    resume() {\r\n        const valid = this._state === \"paused\" /* InternalTaskState.PAUSED */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"running\" /* InternalTaskState.RUNNING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    pause() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */;\r\n        if (valid) {\r\n            this._transition(\"pausing\" /* InternalTaskState.PAUSING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    cancel() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"canceling\" /* InternalTaskState.CANCELING */);\r\n        }\r\n        return valid;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nclass Reference {\r\n    constructor(_service, location) {\r\n        this._service = _service;\r\n        if (location instanceof Location) {\r\n            this._location = location;\r\n        }\r\n        else {\r\n            this._location = Location.makeFromUrl(location, _service.host);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    toString() {\r\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\r\n    }\r\n    _newRef(service, location) {\r\n        return new Reference(service, location);\r\n    }\r\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\r\n    get root() {\r\n        const location = new Location(this._location.bucket, '');\r\n        return this._newRef(this._service, location);\r\n    }\r\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\r\n    get bucket() {\r\n        return this._location.bucket;\r\n    }\r\n    /**\r\n     * The full path of this object.\r\n     */\r\n    get fullPath() {\r\n        return this._location.path;\r\n    }\r\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\r\n    get name() {\r\n        return lastComponent(this._location.path);\r\n    }\r\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\r\n    get storage() {\r\n        return this._service;\r\n    }\r\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\r\n    get parent() {\r\n        const newPath = parent(this._location.path);\r\n        if (newPath === null) {\r\n            return null;\r\n        }\r\n        const location = new Location(this._location.bucket, newPath);\r\n        return new Reference(this._service, location);\r\n    }\r\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\r\n    _throwIfRoot(name) {\r\n        if (this._location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\r\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBytes');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBytesConnection)\r\n        .then(bytes => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            bytes.slice(0, maxDownloadSizeBytes)\r\n        : bytes);\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\r\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBlob');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBlobConnection)\r\n        .then(blob => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            blob.slice(0, maxDownloadSizeBytes)\r\n        : blob);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytes');\r\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(finalMetadata => {\r\n        return {\r\n            metadata: finalMetadata,\r\n            ref\r\n        };\r\n    });\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytesResumable');\r\n    return new UploadTask(ref, new FbsBlob(data), metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\r\n    ref._throwIfRoot('uploadString');\r\n    const data = dataFromString(format, value);\r\n    const metadataClone = Object.assign({}, metadata);\r\n    if (metadataClone['contentType'] == null && data.contentType != null) {\r\n        metadataClone['contentType'] = data.contentType;\r\n    }\r\n    return uploadBytes$1(ref, data.data, metadataClone);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll$1(ref) {\r\n    const accumulator = {\r\n        prefixes: [],\r\n        items: []\r\n    };\r\n    return listAllHelper(ref, accumulator).then(() => accumulator);\r\n}\r\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\r\nasync function listAllHelper(ref, accumulator, pageToken) {\r\n    const opt = {\r\n        // maxResults is 1000 by default.\r\n        pageToken\r\n    };\r\n    const nextPage = await list$1(ref, opt);\r\n    accumulator.prefixes.push(...nextPage.prefixes);\r\n    accumulator.items.push(...nextPage.items);\r\n    if (nextPage.nextPageToken != null) {\r\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\r\n    }\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list$1(ref, options) {\r\n    if (options != null) {\r\n        if (typeof options.maxResults === 'number') {\r\n            validateNumber('options.maxResults', \r\n            /* minValue= */ 1, \r\n            /* maxValue= */ 1000, options.maxResults);\r\n        }\r\n    }\r\n    const op = options || {};\r\n    const requestInfo = list$2(ref.storage, ref._location, \r\n    /*delimiter= */ '/', op.pageToken, op.maxResults);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\r\nfunction getMetadata$1(ref) {\r\n    ref._throwIfRoot('getMetadata');\r\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\r\nfunction updateMetadata$1(ref, metadata) {\r\n    ref._throwIfRoot('updateMetadata');\r\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL$1(ref) {\r\n    ref._throwIfRoot('getDownloadURL');\r\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(url => {\r\n        if (url === null) {\r\n            throw noDownloadURL();\r\n        }\r\n        return url;\r\n    });\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject$1(ref) {\r\n    ref._throwIfRoot('deleteObject');\r\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\r\nfunction _getChild$1(ref, childPath) {\r\n    const newPath = child(ref._location.path, childPath);\r\n    const location = new Location(ref._location.bucket, newPath);\r\n    return new Reference(ref.storage, location);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\r\nfunction refFromURL(service, url) {\r\n    return new Reference(service, url);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\r\nfunction refFromPath(ref, path) {\r\n    if (ref instanceof FirebaseStorageImpl) {\r\n        const service = ref;\r\n        if (service._bucket == null) {\r\n            throw noDefaultBucket();\r\n        }\r\n        const reference = new Reference(service, service._bucket);\r\n        if (path != null) {\r\n            return refFromPath(reference, path);\r\n        }\r\n        else {\r\n            return reference;\r\n        }\r\n    }\r\n    else {\r\n        // ref is a Reference\r\n        if (path !== undefined) {\r\n            return _getChild$1(ref, path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    }\r\n}\r\nfunction ref$1(serviceOrRef, pathOrUrl) {\r\n    if (pathOrUrl && isUrl(pathOrUrl)) {\r\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\r\n            return refFromURL(serviceOrRef, pathOrUrl);\r\n        }\r\n        else {\r\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\r\n        }\r\n    }\r\n    else {\r\n        return refFromPath(serviceOrRef, pathOrUrl);\r\n    }\r\n}\r\nfunction extractBucket(host, config) {\r\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\r\n    if (bucketString == null) {\r\n        return null;\r\n    }\r\n    return Location.makeFromBucketSpec(bucketString, host);\r\n}\r\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\r\n    storage.host = `${host}:${port}`;\r\n    storage._protocol = 'http';\r\n    const { mockUserToken } = options;\r\n    if (mockUserToken) {\r\n        storage._overrideAuthToken =\r\n            typeof mockUserToken === 'string'\r\n                ? mockUserToken\r\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\r\n    }\r\n}\r\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\r\nclass FirebaseStorageImpl {\r\n    constructor(\r\n    /**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */\r\n    app, _authProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _appCheckProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _url, _firebaseVersion) {\r\n        this.app = app;\r\n        this._authProvider = _authProvider;\r\n        this._appCheckProvider = _appCheckProvider;\r\n        this._url = _url;\r\n        this._firebaseVersion = _firebaseVersion;\r\n        this._bucket = null;\r\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */\r\n        this._host = DEFAULT_HOST;\r\n        this._protocol = 'https';\r\n        this._appId = null;\r\n        this._deleted = false;\r\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\r\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\r\n        this._requests = new Set();\r\n        if (_url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(this._host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(host) {\r\n        this._host = host;\r\n        if (this._url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\r\n    get maxUploadRetryTime() {\r\n        return this._maxUploadRetryTime;\r\n    }\r\n    set maxUploadRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxUploadRetryTime = time;\r\n    }\r\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\r\n    get maxOperationRetryTime() {\r\n        return this._maxOperationRetryTime;\r\n    }\r\n    set maxOperationRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxOperationRetryTime = time;\r\n    }\r\n    async _getAuthToken() {\r\n        if (this._overrideAuthToken) {\r\n            return this._overrideAuthToken;\r\n        }\r\n        const auth = this._authProvider.getImmediate({ optional: true });\r\n        if (auth) {\r\n            const tokenData = await auth.getToken();\r\n            if (tokenData !== null) {\r\n                return tokenData.accessToken;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async _getAppCheckToken() {\r\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\r\n        if (appCheck) {\r\n            const result = await appCheck.getToken();\r\n            // TODO: What do we want to do if there is an error getting the token?\r\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\r\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    _delete() {\r\n        if (!this._deleted) {\r\n            this._deleted = true;\r\n            this._requests.forEach(request => request.cancel());\r\n            this._requests.clear();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\r\n    _makeStorageReference(loc) {\r\n        return new Reference(this, loc);\r\n    }\r\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\r\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\r\n        if (!this._deleted) {\r\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\r\n            this._requests.add(request);\r\n            // Request removes itself from set when complete.\r\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    }\r\n    async makeRequestWithTokens(requestInfo, requestFactory) {\r\n        const [authToken, appCheckToken] = await Promise.all([\r\n            this._getAuthToken(),\r\n            this._getAppCheckToken()\r\n        ]);\r\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\r\n    }\r\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.12.3\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\r\nfunction getBytes(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBytesInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytes$1(ref, data, metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString(ref, value, format, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadString$1(ref, value, format, metadata);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytesResumable$1(ref, data, metadata);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\r\nfunction getMetadata(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getMetadata$1(ref);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\r\nfunction updateMetadata(ref, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return updateMetadata$1(ref, metadata);\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list(ref, options) {\r\n    ref = getModularInstance(ref);\r\n    return list$1(ref, options);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll(ref) {\r\n    ref = getModularInstance(ref);\r\n    return listAll$1(ref);\r\n}\r\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getDownloadURL$1(ref);\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject(ref) {\r\n    ref = getModularInstance(ref);\r\n    return deleteObject$1(ref);\r\n}\r\nfunction ref(serviceOrRef, pathOrUrl) {\r\n    serviceOrRef = getModularInstance(serviceOrRef);\r\n    return ref$1(serviceOrRef, pathOrUrl);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction _getChild(ref, childPath) {\r\n    return _getChild$1(ref, childPath);\r\n}\r\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\r\nfunction getStorage(app = getApp(), bucketUrl) {\r\n    app = getModularInstance(app);\r\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\r\n    const storageInstance = storageProvider.getImmediate({\r\n        identifier: bucketUrl\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('storage');\r\n    if (emulator) {\r\n        connectStorageEmulator(storageInstance, ...emulator);\r\n    }\r\n    return storageInstance;\r\n}\r\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\r\nfunction connectStorageEmulator(storage, host, port, options = {}) {\r\n    connectStorageEmulator$1(storage, host, port, options);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\r\nfunction getBlob(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBlobInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\r\nfunction getStream(ref, maxDownloadSizeBytes) {\r\n    throw new Error('getStream() is only supported by NodeJS builds');\r\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    const app = container.getProvider('app').getImmediate();\r\n    const authProvider = container.getProvider('auth-internal');\r\n    const appCheckProvider = container.getProvider('app-check-internal');\r\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\r\n}\r\nfunction registerStorage() {\r\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\r\n    registerVersion(name, version, '');\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterStorage();\n\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * 1 second\n */\nexport const DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unique to the `StorageError`.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code: StorageErrorCode, message: string, private status_ = 0) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status(): number {\n    return this.status_;\n  }\n\n  set status(status: number) {\n    this.status_ = status;\n  }\n\n  /**\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nexport enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function missingPolyFill(polyFill: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nexport function start(\n  doRequest: (\n    onRequestComplete: (success: boolean) => void,\n    canceled: boolean\n  ) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  backoffCompleteCb: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nexport function isRetryStatusCode(\n  status: number,\n  additionalRetryCodes: number[]\n): boolean {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429\n  ];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\nimport { isRetryStatusCode } from './utils';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>,\n    private retry = true\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (\n        progressEvent: ProgressEvent\n      ) => void = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (\n            !hitServer ||\n            (isRetryStatusCode(status, this.additionalRetryCodes_) &&\n              this.retry)\n          ) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string,\n  retry = true\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory,\n    retry\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { missingPolyFill } from '../../implementation/error';\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = (typeof StringFormat)[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if ((e as Error).message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr: StorageError;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = (typeof TaskState)[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError,\n  retryLimitExceeded\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\nimport { isRetryStatusCode } from './implementation/utils';\nimport { CompleteFn } from '@firebase/util';\nimport { DEFAULT_MIN_SLEEP_TIME_MILLIS } from './implementation/constants';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private pendingTimeout?: ReturnType<typeof setTimeout>;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  private sleepTime: number;\n\n  private maxSleepTime: number;\n\n  isExponentialBackoffExpired(): boolean {\n    return this.sleepTime > this.maxSleepTime;\n  }\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        const backoffExpired = this.isExponentialBackoffExpired();\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            this.sleepTime = Math.max(\n              this.sleepTime * 2,\n              DEFAULT_MIN_SLEEP_TIME_MILLIS\n            );\n            this._needToFetchStatus = true;\n            this.completeTransitions_();\n            return;\n          }\n        }\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this.pendingTimeout = setTimeout(() => {\n              this.pendingTimeout = undefined;\n              this._continueUpload();\n            }, this.sleepTime);\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e as StorageError;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken,\n        /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize * 2 < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        } else if (this.pendingTimeout) {\n          clearTimeout(this.pendingTimeout);\n          this.pendingTimeout = undefined;\n          this.completeTransitions_();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: CompleteFn | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null,\n    retry = true\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion,\n        retry\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport {\n  EmulatorMockTokenOptions,\n  getModularInstance,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\nexport { StorageError, StorageErrorCode } from './implementation/error';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageReference } from './public-types';\nimport { Reference, getBlobInternal } from './reference';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * This API is not available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise that resolves with a Blob containing the object's bytes\n */\nexport function getBlob(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Downloads the data at the object's location. Raises an error event if the\n * object is not found.\n *\n * This API is only available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A stream with the object's data as bytes\n */\nexport function getStream(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","parcelHelpers","defineInteropFlag","export","getCreatorPage","_element","_tagsLabel","_main","_database","_storage","Files","FileReaders","imagesLinksArray","currentId","Math","random","toString","substring","page","createElement","chapter","title","innerText","descr","form","titleLabel","titleInput","required","authorLabel","authorInput","value","getUserName","setAttribute","textLabel","textInput","imagesBlock","imagesDiv","chooseImage","type","laodLab","progressText","tagsEl","getTagsLabel","getProgress","submitBtn","clearImage","innerHTML","append","tagsLabel","addEventListener","event","input","preventDefault","document","onchange","e","assignImgsToFilesArray","thisFiles","num","loopLim","push","alert","target","files","createImgTags","index","FileReader","onload","img","classList","add","src","result","readAsDataURL","lab","style","click","realdb","getDatabase","date","Date","clearValues","disabled","uploadItem","load","querySelector","set","ref","text","userName","userToken","getUserToken","likes","linksOfImagesArray","tags","targetTags","then","getCheckedTags","display","toLocaleString","isAuth","remove","uploadAllImages","uploadImageToStorage","imgToUpload","imgNo","indexOf","metadata","contentType","storage","getStorage","storageRef","uploadTask","uploadBytesResumable","on","snapshot","error","getDownloadURL","downloadURL","authModal","openAuthModal","selectBtn","textBtn","checkedList","arrowBtn","insertAdjacentHTML","tagBox","tagList","tagSearch","placeholder","list","getTagList","tagCount","tagsArray","forEach","tag","item","removeBtn","removeCheckedTag","currentTag","closest","dataset","splice","resetTag","items","querySelectorAll","temp","contains","includes","listIsEmpty","tagListMessage","toggle","getCurrentTags","exportAll","StorageErrorCode","ErrorCode","StorageError","StringFormat","FbsBlob","Location","TaskEvent","TaskState","UploadTask","dataFromString","_getChild","invalidArgument","invalidRootOperation","connectStorageEmulator","deleteObject","getBlob","getBytes","getMetadata","getStream","listAll","updateMetadata","uploadBytes","uploadString","_app","_util","_component","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","FirebaseError","constructor","message","status_","prependCode","customData","serverResponse","_baseMessage","setPrototypeOf","prototype","status","_codeEquals","unknown","UNKNOWN","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","canceled","CANCELED","cannotSliceBlob","CANNOT_SLICE_BLOB","INVALID_ARGUMENT","appDeleted","APP_DELETED","INVALID_ROOT_OPERATION","invalidFormat","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","bucket","path","path_","isRoot","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","host","bucketLocation","makeFromUrl","INVALID_DEFAULT_BUCKET","url","location","bucketDomain","gsRegex","RegExp","httpModify","loc","decodeURIComponent","firebaseStorageHost","replace","groups","regex","indices","postModify","charAt","slice","group","captures","exec","bucketValue","pathValue","INVALID_URL","FailRequest","promise_","Promise","reject","getPromise","cancel","_appDelete","isString","p","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","isExtraRetryCode","extraRetryCodes","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve_","reject_","start_","backoffDone","requestWentThrough","connection","wasSuccessCode","getResponse","getErrorText","RequestEndStatus","start","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","waitMillis","stopped","stop","wasTimeout","backoffCallback","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","ABORT","appDelete","abort","getBlob$1","BlobBuilder1","BlobBuilder","WebKitBlobBuilder","undefined","bb","UNSUPPORTED_ENVIRONMENT","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataUrl","parts","DataURLParts","base64","rest","percentEncodedBytes_","decoded","b","c","charCodeAt","hi","lo","Uint8Array","bytes","hasMinus","hasUnder","hasPlus","hasSlash","decodeBase64","encoded","atob","array","dataURL","end","matches","match","middle","s","elideCopy","size","blobType","data_","ArrayBuffer","byteLength","size_","type_","startByte","endByte","buffer","blob","sliced","webkitSlice","mozSlice","blobby","map","val","uint8Arrays","finalLength","merged","uploadData","jsonObjectOrNull","obj","JSON","parse","Array","isArray","lastComponent","lastIndexOf","noXform_","Mapping","server","local","writable","xform","mappings_","getMappings","mappings","nameMapping","_metadata","fullPath","sizeMapping","Number","fromResourceString","service","resourceString","fromResource","resource","len","mapping","_makeStorageReference","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","RequestInfo","method","handler","urlParams","headers","body","errorHandler","progressCallback","successCodes","handlerCheck","cndn","metadataHandler","xhr","sharedErrorHandler","newErr","UNAUTHORIZED_APP","UNAUTHENTICATED","QUOTA_EXCEEDED","UNAUTHORIZED","objectErrorHandler","shared","OBJECT_NOT_FOUND","getMetadata$2","_protocol","maxOperationRetryTime","requestInfo","getBytes$1","maxDownloadSizeBytes","_","metadataForUpload_","metadataClone","assign","multipartUpload","boundary","genBoundary","str","metadata_","preBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","STATE_CHANGED","RUNNING","PAUSED","SUCCESS","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","isFunction","next","observer","async","f","argsToForward","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","XhrBytesConnection","newBytesConnection","XhrBlobConnection","newBlobConnection","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","backoffExpired","isExponentialBackoffExpired","sleepTime","max","_transition","_metadataErrorHandler","maxSleepTime","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","pendingTimeout","_continueUpload","_oneShotUpload","_resolveToken","callback","all","_getAuthToken","_getAppCheckToken","authToken","appCheckToken","createResumableUpload","metadataForUpload","_location","createRequest","_makeRequest","getResumableUploadStatus","sizeString","isNaN","statusRequest","chunkSize","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","SERVER_FILE_WRONG_SIZE","bytesLeft","bytesToUpload","min","uploadStatus","newCurrent","uploadRequest","newStatus","_increaseMultiplier","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","externalState","bytesTransferred","totalBytes","task","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_notifyObserver","_finishPromise","observers","triggered","toCall","resume","valid","pause","Reference","_service","_newRef","root","newPath","_throwIfRoot","uploadBytes$1","makeRequestWithTokens","finalMetadata","listAllHelper","accumulator","pageToken","nextPage","list$1","prefixes","nextPageToken","options","maxResults","op","list$2","delimiter","listResult","fromResponseString","fromBackendResponse","pathWithoutTrailingSlash","reference","_getChild$1","childPath","child","canonicalChildPath","split","filter","component","join","extractBucket","config","FirebaseStorageImpl","app","_authProvider","_appCheckProvider","_url","_firebaseVersion","_bucket","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","_overrideAuthToken","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","token","_delete","request","clear","requestFactory","makeRequest","appId","firebaseVersion","delete","version","STORAGE_TYPE","getBytesInternal","getModularInstance","uploadString$1","getMetadata$1","updateMetadata$1","updateMetadata$2","listAll$1","getDownloadURL$1","getDownloadUrl","downloadUrlFromResourceString","tokens","urls","tokensList","base","alt","NO_DOWNLOAD_URL","deleteObject$1","deleteObject$2","_xhr","_text","serviceOrRef","pathOrUrl","ref$1","test","refFromPath","NO_DEFAULT_BUCKET","getApp","bucketUrl","storageInstance","storageProvider","_getProvider","identifier","emulator","getDefaultEmulatorHostnameAndPort","port","connectStorageEmulator$1","mockUserToken","createMockUserToken","projectId","getBlobInternal","_registerComponent","Component","container","instanceIdentifier","getProvider","SDK_VERSION","setMultipleInstances","registerVersion","fbsAsync","requestsList","requestsGetMetadata","requestsUpdateMetadata","requestsGetDownloadUrl","requestsDeleteObject","uploadBytesInternal","uploadStringInternal","uploadBytesResumableInternal","getMetadataInternal","updateMetadataInternal","listInternal","listAllInternal","getDownloadURLInternal","deleteObjectInternal","refInternal","_getChildInternal","connectEmulatorInternal"],"version":3,"file":"creator.1d22ea61.js.map"}