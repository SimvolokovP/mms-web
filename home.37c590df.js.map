{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCOA,EAAA,MAAA,CAAA,EAAA,cAAA,IAAgB,GAPhB,IAAA,EAAA,EAAA,oCACA,EAAA,EAAA,wCACA,EAAA,EAAA,wCACA,EAAA,kCACA,IAAA,EAAA,EAAA,cAGO,SAAS,IACZ,IAAM,EAAO,AAAA,CAAA,EAAA,EAAA,aAAa,AAAb,EAAc,UAAW,OAAQ,mBAExC,EAAQ,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EAAc,KAAM,gBAClC,CAAA,EAAM,SAAS,CAAG,cAElB,IAAM,EAAO,AAAA,CAAA,EAAA,EAAA,YAAY,AAAZ,IAEP,EAAY,AAAA,CAAA,EAAA,EAAA,aAAa,AAAb,EAAc,MAAO,eAAgB,UAEjD,EAAa,AAAA,CAAA,EAAA,EAAA,aAAa,AAAb,EAAc,QAAS,gBAAiB,wBACrD,EAAc,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EAAc,QAAS,gBAC3C,CAAA,EAAY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","sources":["<anon>","src/js/pages/home/home.js","src/js/components/itemsList/itemsList.js","src/js/components/tagsLabel/tagsLabel.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"4QxHw\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"getHomePage\", ()=>getHomePage);\nvar _element = require(\"../../components/element/element\");\nvar _itemsList = require(\"../../components/itemsList/itemsList\");\nvar _tagsLabel = require(\"../../components/tagsLabel/tagsLabel\");\nvar _topbar = require(\"../../components/topbar/topbar\");\nvar _main = require(\"../../main\");\nvar _homeCss = require(\"./home.css\");\nfunction getHomePage() {\n    const page = (0, _element.createElement)(\"section\", \"home\", \"section-padding\");\n    const title = (0, _element.createElement)(\"h2\", \"section-title\");\n    title.innerText = \"\\u041B\\u0435\\u043D\\u0442\\u0430 \\u043C\\u0435\\u043C\\u043E\\u0432\";\n    const list = (0, _itemsList.getItemsList)();\n    const filterBox = (0, _element.createElement)(\"div\", \"home__filter\", \"filter\");\n    const labelInput = (0, _element.createElement)(\"label\", \"filter__label\", \"filter__label--input\");\n    const filterInput = (0, _element.createElement)(\"input\", \"filter__input\");\n    filterInput.type = \"text\";\n    filterInput.placeholder = \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u043C\\u0435\\u043C\\u0430 \\u043F\\u043E \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044E..\";\n    const inputSubmit = (0, _element.createElement)(\"button\", \"filter__input--btn\");\n    const inputSVG = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M7.33333 12.6667C10.2789 12.6667 12.6667 10.2789 12.6667 7.33333C12.6667 4.38781 10.2789 2 7.33333 2C4.38781 2 2 4.38781 2 7.33333C2 10.2789 4.38781 12.6667 7.33333 12.6667Z\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    <path d=\"M14 14L11.1 11.1\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    </svg>    \r\n    `;\n    inputSubmit.insertAdjacentHTML(\"beforeend\", inputSVG);\n    const labelCategory = (0, _element.createElement)(\"div\", \"filter__label\");\n    const dateBtn = (0, _element.createElement)(\"button\", \"filter__btn\", \"filter__btn--date\");\n    const dateBtnSvg = (0, _element.createElement)(\"div\", \"filter__button--svg\");\n    dateBtnSvg.insertAdjacentHTML(\"beforeend\", `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g clip-path=\"url(#clip0_2_16)\">\r\n    <path d=\"M8 14.6667C11.6819 14.6667 14.6667 11.6819 14.6667 8C14.6667 4.3181 11.6819 1.33334 8 1.33334C4.3181 1.33334 1.33333 4.3181 1.33333 8C1.33333 11.6819 4.3181 14.6667 8 14.6667Z\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    <path d=\"M8 4V8L10.6667 9.33333\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    </g>\r\n    <defs>\r\n    <clipPath id=\"clip0_2_16\">\r\n    <rect width=\"16\" height=\"16\" fill=\"white\"/>\r\n    </clipPath>\r\n    </defs>\r\n    </svg>    \r\n    `);\n    const dateBtnSpan = (0, _element.createElement)(\"span\");\n    dateBtnSpan.innerText = \"\\u041F\\u043E \\u0434\\u0430\\u0442\\u0435\";\n    const likeBtn = (0, _element.createElement)(\"button\", \"filter__btn\", \"filter__btn--like\");\n    const likeBtnSvg = (0, _element.createElement)(\"div\", \"filter__button--svg\");\n    likeBtnSvg.insertAdjacentHTML(\"beforeend\", `<svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M7.96334 14.6668C7.88999 14.6668 7.81664 14.6668 7.74328 14.5915H7.66993C6.05617 13.7629 2.24182 11.4277 0.921467 7.73651C0.701408 7.05854 0.187938 4.27135 1.8017 2.53877C2.75529 1.48416 3.63552 1.3335 4.22235 1.3335C5.61605 1.3335 7.08311 2.16212 7.96334 3.36739C8.84358 2.08679 10.1639 1.3335 11.7043 1.3335C12.2912 1.3335 13.1714 1.48416 14.1983 2.53877C15.8121 4.27135 15.2986 7.13387 15.0786 7.73651C13.7582 11.503 9.87052 13.7629 8.33011 14.5915C8.1834 14.6668 8.0367 14.6668 7.96334 14.6668Z\" stroke=\"#18191F\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    </svg>    \r\n    `);\n    const likeBtnSpan = (0, _element.createElement)(\"span\");\n    likeBtnSpan.innerText = \"\\u041F\\u043E \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u0443 \\u043B\\u0430\\u0439\\u043A\\u043E\\u0432\";\n    const relevationBtn = (0, _element.createElement)(\"button\", \"filter__btn\", \"filter__btn--relevation\", \"active\");\n    const relevationBtnSvg = (0, _element.createElement)(\"div\", \"filter__button--svg\");\n    relevationBtnSvg.insertAdjacentHTML(\"beforeend\", `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g clip-path=\"url(#clip0_2_14)\">\r\n    <path d=\"M8 1.33334L10.06 5.50667L14.6667 6.18L11.3333 9.42667L12.12 14.0133L8 11.8467L3.88 14.0133L4.66666 9.42667L1.33333 6.18L5.93999 5.50667L8 1.33334Z\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    </g>\r\n    <defs>\r\n    <clipPath id=\"clip0_2_14\">\r\n    <rect width=\"16\" height=\"16\" fill=\"white\"/>\r\n    </clipPath>\r\n    </defs>\r\n    </svg>        \r\n    `);\n    const relevationBtnSpan = (0, _element.createElement)(\"span\");\n    relevationBtnSpan.innerText = \"\\u041F\\u043E \\u0440\\u0435\\u043B\\u0435\\u0432\\u0430\\u043D\\u0442\\u043D\\u043E\\u0441\\u0442\\u0438\";\n    const tagsLabel = (0, _tagsLabel.getTagsLabel)();\n    const tagsSearch = (0, _element.createElement)(\"button\", \"tags__search\");\n    tagsSearch.innerText = \"\\u041F\\u043E\\u0438\\u0441\\u043A\";\n    dateBtn.append(dateBtnSvg, dateBtnSpan);\n    likeBtn.append(likeBtnSvg, likeBtnSpan);\n    relevationBtn.append(relevationBtnSvg, relevationBtnSpan);\n    labelInput.append(filterInput, inputSubmit);\n    labelCategory.append(relevationBtn, dateBtn, likeBtn);\n    filterBox.append(labelInput, labelCategory);\n    page.append(title, filterBox, list);\n    let categoriesBtn = [];\n    categoriesBtn.push(likeBtn, dateBtn, relevationBtn);\n    categoriesBtn.forEach((btn)=>{\n        btn.addEventListener(\"click\", ()=>{\n            categoriesBtn.forEach((otherBtn)=>{\n                if (otherBtn !== btn) otherBtn.classList.remove(\"active\");\n            });\n            btn.classList.add(\"active\");\n            inputClear();\n        });\n    });\n    inputSubmit.addEventListener(\"click\", ()=>{\n        let inputValue = filterInput.value.toLowerCase();\n        let targetArray = (0, _main.getArrayOfItems)().filter((item)=>item.title && item.title.toLowerCase().includes(inputValue));\n        (0, _main.renderItems)(targetArray);\n    });\n    likeBtn.addEventListener(\"click\", ()=>{\n        let targetArray = (0, _main.getArrayOfItems)();\n        let sortedArray = targetArray.slice().sort((a, b)=>b.likes - a.likes);\n        (0, _main.renderItems)(sortedArray);\n    });\n    dateBtn.addEventListener(\"click\", ()=>{\n        let targetArray = (0, _main.getArrayOfItems)();\n        let sortedArray = targetArray.slice().sort((a, b)=>{\n            return new Date(convertDateStrToStandardFormat(b.date)) - new Date(convertDateStrToStandardFormat(a.date));\n        });\n        (0, _main.renderItems)(sortedArray);\n    });\n    // tagsSearch.addEventListener('click', () => {\n    //     let targetArray = getArrayOfItems();\n    //     let newArray = [];\n    //     if (tagsLabel.targetTags.length === 0) {\n    //         newArray = targetArray;\n    //         renderItems(newArray);\n    //         return;\n    //     }\n    //     let cleanedTags = tagsLabel.targetTags.map(tag => {\n    //         if (typeof tag === 'string') {\n    //             return tag.trim(); // Удаляем пробелы из тэгов, если tag является строкой\n    //         }\n    //         return tag; // Возвращаем tag без изменений, если не является строкой\n    //     });\n    //     newArray = targetArray.filter(item => {\n    //         // Проверяем, есть ли у элемента теги перед фильтрацией\n    //         if (item.tags) {\n    //             let cleanedItemTags = item.tags.map(tag => {\n    //                 if (typeof tag === 'string') {\n    //                     return tag.trim(); // Удаляем пробелы из тэгов элемента, если tag является строкой\n    //                 }\n    //                 return tag; // Возвращаем tag без изменений, если не является строкой\n    //             });\n    //             return cleanedTags.some(tag => cleanedItemTags.includes(tag));\n    //         }\n    //         return false; // Если у элемента нет тегов, не включаем его в новый массив\n    //     });\n    //     renderItems(newArray);\n    // });\n    function convertDateStrToStandardFormat(dateStr) {\n        let parts = dateStr.split(\", \");\n        let dateParts = parts[0].split(\".\");\n        let timeParts = parts[1].split(\":\");\n        return `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}T${timeParts.join(\":\")}`;\n    }\n    relevationBtn.addEventListener(\"click\", ()=>{\n        let targetArray = (0, _main.getArrayOfItems)();\n        (0, _main.renderItems)(targetArray);\n    });\n    function inputClear() {\n        filterInput.value = \"\";\n    }\n    return page;\n}\n\n},{\"../../components/element/element\":\"glRxY\",\"../../components/itemsList/itemsList\":\"jTjwR\",\"../../components/tagsLabel/tagsLabel\":\"bWv4N\",\"../../components/topbar/topbar\":\"fNQEk\",\"../../main\":\"fclUP\",\"./home.css\":\"kYTQn\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"jTjwR\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"getItemsList\", ()=>getItemsList);\nvar _element = require(\"../element/element\");\nfunction getItemsList() {\n    const list = (0, _element.createElement)(\"ul\", \"home__list\", \"list-reset\");\n    return list;\n}\n\n},{\"../element/element\":\"glRxY\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"bWv4N\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"getTagsLabel\", ()=>getTagsLabel);\nvar _main = require(\"../../main\");\nvar _element = require(\"../element/element\");\nvar _tagsLabelCss = require(\"./tagsLabel.css\");\nfunction getTagsLabel() {\n    const tagsLabel = (0, _element.createElement)(\"label\", \"tags__label\");\n    const selectBtn = (0, _element.createElement)(\"div\", \"select-btn\");\n    const textBtn = (0, _element.createElement)(\"span\", \"btn-text\");\n    const checkedList = (0, _element.createElement)(\"ul\", \"tags__checked\", \"list-reset\");\n    textBtn.innerText = \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0442\\u044D\\u0433\\u0438 (\\u043D\\u0435 \\u0431\\u043E\\u043B\\u0435\\u0435 3):\";\n    const arrowBtn = (0, _element.createElement)(\"span\", \"arrow-down\");\n    arrowBtn.insertAdjacentHTML(\"beforeend\", `<svg width=\"14\" height=\"8\" viewBox=\"0 0 14 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M1 1L7 7L13 1\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    </svg>`);\n    let targetTags = [];\n    const tagBox = (0, _element.createElement)(\"div\", \"tags__box\");\n    const tagList = (0, _element.createElement)(\"ul\", \"tags__items\");\n    const tagSearch = (0, _element.createElement)(\"input\", \"tags__search\");\n    tagSearch.type = \"text\";\n    tagSearch.placeholder = \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u043F\\u043E \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044E\";\n    const list = (0, _main.getTagList)();\n    let tagCount = 0;\n    list.forEach((tag)=>{\n        const temp = (0, _element.createElement)(\"li\", \"tag\");\n        temp.setAttribute(\"data-value\", tag);\n        temp.setAttribute(\"data-id\", tagCount);\n        const name = (0, _element.createElement)(\"span\", \"tag__text\");\n        name.innerText = tag;\n        temp.append(name);\n        tagList.append(temp);\n        temp.addEventListener(\"click\", ()=>{\n            if (!temp.classList.contains(\"checked\") && targetTags.length <= 2) {\n                targetTags.push({\n                    id: temp.dataset.id,\n                    value: temp.dataset.value\n                });\n                temp.classList.add(\"checked\");\n                let tagsArray = targetTags;\n                getCheckedTags(tagsArray);\n                getCurrentTags();\n            }\n        });\n        tagCount++;\n    });\n    function getCurrentTags() {\n        return targetTags;\n    }\n    function resetTag(id) {\n        const items = document.querySelectorAll(\".tag\");\n        for(let i = 0; i < items.length; i++)if (items[i].dataset.id === id) items[i].classList.remove(\"checked\");\n    }\n    function getCheckedTags(tagsArray) {\n        checkedList.innerHTML = \"\";\n        tagsArray.forEach((tag)=>{\n            const { id, value } = tag;\n            const item = (0, _element.createElement)(\"li\", \"checked-tag\");\n            const name = (0, _element.createElement)(\"span\");\n            name.innerText = value;\n            const removeBtn = (0, _element.createElement)(\"div\", \"checked-tag__remove\");\n            removeBtn.insertAdjacentHTML(\"beforeend\", `<svg width=\"15\" height=\"14\" viewBox=\"0 0 15 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M1.63603 12.364L12.9497 1.05024\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n            <path d=\"M2 1L13.3137 12.3137\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n            </svg>\r\n            `);\n            removeBtn.addEventListener(\"click\", (event)=>removeCheckedTag(event));\n            item.append(name, removeBtn);\n            item.setAttribute(\"data-value\", value);\n            item.setAttribute(\"data-id\", id);\n            checkedList.append(item);\n        });\n    }\n    function removeCheckedTag(event) {\n        const currentTag = event.target.closest(\"li\");\n        const currentId = currentTag.dataset.id;\n        for(let i = 0; i < targetTags.length; i++)if (targetTags[i].id === currentId) {\n            targetTags.splice(i, 1);\n            let tagsArray = targetTags;\n            getCheckedTags(tagsArray);\n            resetTag(currentId);\n        }\n    }\n    function listIsEmpty() {\n        if (tagList.innerHTML == \"\") {\n            const tagListMessage = (0, _element.createElement)(\"span\");\n            tagListMessage.innerText = \"\\u0422\\u0430\\u043A\\u043E\\u0433\\u043E \\u0442\\u044D\\u0433\\u0430 \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\";\n            tagList.append(tagListMessage);\n        }\n    }\n    selectBtn.append(textBtn, arrowBtn);\n    tagBox.append(tagSearch, tagList);\n    tagsLabel.append(selectBtn, tagBox, checkedList);\n    tagSearch.addEventListener(\"input\", ()=>{\n        const tags = document.querySelectorAll(\".tag\");\n        let { value } = tagSearch;\n        for(let i = 0; i < tags.length; i++)if (!tags[i].dataset.value.includes(value)) tags[i].classList.add(\"hidden\");\n        else tags[i].classList.remove(\"hidden\");\n        listIsEmpty();\n    });\n    selectBtn.addEventListener(\"click\", ()=>{\n        selectBtn.classList.toggle(\"open\");\n    });\n    document.addEventListener(\"click\", (event)=>{\n        const selectBtn = document.querySelector(\".select-btn\");\n        const tagsLabel = document.querySelector(\".tags__label\");\n        if (selectBtn && !selectBtn.contains(event.target) && !tagsLabel.contains(event.target)) selectBtn.classList.remove(\"open\");\n    });\n    return {\n        tagsLabel,\n        targetTags,\n        getCurrentTags,\n        getCheckedTags\n    };\n}\n\n},{\"../../main\":\"fclUP\",\"../element/element\":\"glRxY\",\"./tagsLabel.css\":\"iKn8a\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"iKn8a\":[function() {},{}],\"kYTQn\":[function() {},{}]},[], null, \"parcelRequire4d19\")\n\n//# sourceMappingURL=home.37c590df.js.map\n","import { createElement } from \"../../components/element/element\";\r\nimport { getItemsList } from \"../../components/itemsList/itemsList\";\r\nimport { getTagsLabel } from \"../../components/tagsLabel/tagsLabel\";\r\nimport { getTopbar } from \"../../components/topbar/topbar\";\r\nimport { getArrayOfItems, renderItems } from \"../../main\";\r\nimport \"./home.css\"\r\n\r\nexport function getHomePage() {\r\n    const page = createElement('section', 'home', 'section-padding');\r\n\r\n    const title = createElement('h2', 'section-title');\r\n    title.innerText = 'Лента мемов'\r\n\r\n    const list = getItemsList();\r\n\r\n    const filterBox = createElement('div', 'home__filter', 'filter');\r\n\r\n    const labelInput = createElement('label', 'filter__label', 'filter__label--input');\r\n    const filterInput = createElement('input', 'filter__input');\r\n    filterInput.type = 'text';\r\n    filterInput.placeholder = 'Поиск мема по названию..'\r\n\r\n    const inputSubmit = createElement('button', 'filter__input--btn');\r\n    const inputSVG = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M7.33333 12.6667C10.2789 12.6667 12.6667 10.2789 12.6667 7.33333C12.6667 4.38781 10.2789 2 7.33333 2C4.38781 2 2 4.38781 2 7.33333C2 10.2789 4.38781 12.6667 7.33333 12.6667Z\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    <path d=\"M14 14L11.1 11.1\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    </svg>    \r\n    `;\r\n    inputSubmit.insertAdjacentHTML('beforeend', inputSVG);\r\n\r\n    const labelCategory = createElement('div', 'filter__label');\r\n    const dateBtn = createElement('button', 'filter__btn', 'filter__btn--date');\r\n    const dateBtnSvg = createElement('div', 'filter__button--svg');\r\n    dateBtnSvg.insertAdjacentHTML('beforeend', `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g clip-path=\"url(#clip0_2_16)\">\r\n    <path d=\"M8 14.6667C11.6819 14.6667 14.6667 11.6819 14.6667 8C14.6667 4.3181 11.6819 1.33334 8 1.33334C4.3181 1.33334 1.33333 4.3181 1.33333 8C1.33333 11.6819 4.3181 14.6667 8 14.6667Z\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    <path d=\"M8 4V8L10.6667 9.33333\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    </g>\r\n    <defs>\r\n    <clipPath id=\"clip0_2_16\">\r\n    <rect width=\"16\" height=\"16\" fill=\"white\"/>\r\n    </clipPath>\r\n    </defs>\r\n    </svg>    \r\n    `);\r\n    const dateBtnSpan = createElement('span');\r\n    dateBtnSpan.innerText = 'По дате';\r\n\r\n    const likeBtn = createElement('button', 'filter__btn', 'filter__btn--like');\r\n    const likeBtnSvg = createElement('div', 'filter__button--svg');\r\n    likeBtnSvg.insertAdjacentHTML('beforeend', `<svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M7.96334 14.6668C7.88999 14.6668 7.81664 14.6668 7.74328 14.5915H7.66993C6.05617 13.7629 2.24182 11.4277 0.921467 7.73651C0.701408 7.05854 0.187938 4.27135 1.8017 2.53877C2.75529 1.48416 3.63552 1.3335 4.22235 1.3335C5.61605 1.3335 7.08311 2.16212 7.96334 3.36739C8.84358 2.08679 10.1639 1.3335 11.7043 1.3335C12.2912 1.3335 13.1714 1.48416 14.1983 2.53877C15.8121 4.27135 15.2986 7.13387 15.0786 7.73651C13.7582 11.503 9.87052 13.7629 8.33011 14.5915C8.1834 14.6668 8.0367 14.6668 7.96334 14.6668Z\" stroke=\"#18191F\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    </svg>    \r\n    `);\r\n    const likeBtnSpan = createElement('span');\r\n    likeBtnSpan.innerText = 'По количеству лайков';\r\n\r\n    const relevationBtn = createElement('button', 'filter__btn', 'filter__btn--relevation', 'active');\r\n    const relevationBtnSvg = createElement('div', 'filter__button--svg');\r\n    relevationBtnSvg.insertAdjacentHTML('beforeend', `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g clip-path=\"url(#clip0_2_14)\">\r\n    <path d=\"M8 1.33334L10.06 5.50667L14.6667 6.18L11.3333 9.42667L12.12 14.0133L8 11.8467L3.88 14.0133L4.66666 9.42667L1.33333 6.18L5.93999 5.50667L8 1.33334Z\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    </g>\r\n    <defs>\r\n    <clipPath id=\"clip0_2_14\">\r\n    <rect width=\"16\" height=\"16\" fill=\"white\"/>\r\n    </clipPath>\r\n    </defs>\r\n    </svg>        \r\n    `);\r\n    const relevationBtnSpan = createElement('span');\r\n    relevationBtnSpan.innerText = 'По релевантности';\r\n\r\n    \r\n    \r\n    const tagsLabel = getTagsLabel();\r\n    const tagsSearch = createElement('button', 'tags__search');\r\n    tagsSearch.innerText = \"Поиск\";\r\n    dateBtn.append(dateBtnSvg, dateBtnSpan);\r\n    likeBtn.append(likeBtnSvg, likeBtnSpan);\r\n\r\n    relevationBtn.append(relevationBtnSvg, relevationBtnSpan);\r\n\r\n    labelInput.append(filterInput, inputSubmit);\r\n    labelCategory.append(relevationBtn, dateBtn, likeBtn);\r\n\r\n    filterBox.append(labelInput, labelCategory);\r\n\r\n    page.append(title, filterBox, list);\r\n\r\n    let categoriesBtn = [];\r\n    categoriesBtn.push(likeBtn, dateBtn, relevationBtn);\r\n\r\n    categoriesBtn.forEach(btn => {\r\n        btn.addEventListener('click', () => {\r\n            categoriesBtn.forEach(otherBtn => {\r\n                if (otherBtn !== btn) {\r\n                    otherBtn.classList.remove('active');\r\n                }\r\n            });\r\n            btn.classList.add('active');\r\n            inputClear();\r\n        });\r\n    });\r\n\r\n    inputSubmit.addEventListener('click', () => {\r\n        let inputValue = filterInput.value.toLowerCase(); \r\n        let targetArray = getArrayOfItems().filter(item => item.title && item.title.toLowerCase().includes(inputValue)); \r\n        \r\n        renderItems(targetArray);\r\n        \r\n\r\n        \r\n    });\r\n    \r\n    likeBtn.addEventListener('click', () => {\r\n        let targetArray = getArrayOfItems();\r\n        let sortedArray = targetArray.slice().sort((a, b) => b.likes - a.likes);\r\n        renderItems(sortedArray);\r\n    });\r\n\r\n    dateBtn.addEventListener('click', () => {\r\n        let targetArray = getArrayOfItems();\r\n        let sortedArray = targetArray.slice().sort((a, b) => {\r\n            return new Date(convertDateStrToStandardFormat(b.date)) - new Date(convertDateStrToStandardFormat(a.date));\r\n        });\r\n        renderItems(sortedArray);\r\n    });\r\n\r\n    // tagsSearch.addEventListener('click', () => {\r\n    //     let targetArray = getArrayOfItems();\r\n    \r\n    //     let newArray = [];\r\n    \r\n    //     if (tagsLabel.targetTags.length === 0) {\r\n    //         newArray = targetArray;\r\n    //         renderItems(newArray);\r\n    //         return;\r\n    //     }\r\n    \r\n    //     let cleanedTags = tagsLabel.targetTags.map(tag => {\r\n    //         if (typeof tag === 'string') {\r\n    //             return tag.trim(); // Удаляем пробелы из тэгов, если tag является строкой\r\n    //         }\r\n    //         return tag; // Возвращаем tag без изменений, если не является строкой\r\n    //     });\r\n    \r\n    //     newArray = targetArray.filter(item => {\r\n    //         // Проверяем, есть ли у элемента теги перед фильтрацией\r\n    //         if (item.tags) {\r\n    //             let cleanedItemTags = item.tags.map(tag => {\r\n    //                 if (typeof tag === 'string') {\r\n    //                     return tag.trim(); // Удаляем пробелы из тэгов элемента, если tag является строкой\r\n    //                 }\r\n    //                 return tag; // Возвращаем tag без изменений, если не является строкой\r\n    //             });\r\n    //             return cleanedTags.some(tag => cleanedItemTags.includes(tag));\r\n    //         }\r\n    //         return false; // Если у элемента нет тегов, не включаем его в новый массив\r\n    //     });\r\n    \r\n    //     renderItems(newArray);\r\n    // });\r\n    \r\n    \r\n    \r\n    \r\n    function convertDateStrToStandardFormat(dateStr) {\r\n        let parts = dateStr.split(', ');\r\n        let dateParts = parts[0].split('.');\r\n        let timeParts = parts[1].split(':');\r\n        return `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}T${timeParts.join(':')}`;\r\n    }\r\n    \r\n\r\n    relevationBtn.addEventListener('click', () => {\r\n        let targetArray = getArrayOfItems();\r\n        renderItems(targetArray);\r\n    });\r\n    \r\n    function inputClear() {\r\n        filterInput.value = '';\r\n    }\r\n\r\n    return page;\r\n}","import { createElement } from \"../element/element\";\r\n\r\n\r\nexport function getItemsList() {\r\n    const list = createElement('ul', 'home__list', 'list-reset');\r\n    return list;\r\n}","import { getTagList } from \"../../main\";\r\nimport { createElement } from \"../element/element\";\r\nimport './tagsLabel.css';\r\n\r\nexport function getTagsLabel() {\r\n    const tagsLabel = createElement('label', 'tags__label');\r\n    const selectBtn = createElement('div', 'select-btn');\r\n    const textBtn = createElement('span', 'btn-text');\r\n    const checkedList = createElement('ul', 'tags__checked', 'list-reset');\r\n    textBtn.innerText = 'Добавить тэги (не более 3):';\r\n    const arrowBtn = createElement('span', 'arrow-down');\r\n    arrowBtn.insertAdjacentHTML('beforeend', `<svg width=\"14\" height=\"8\" viewBox=\"0 0 14 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M1 1L7 7L13 1\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n    </svg>`);\r\n\r\n    let targetTags = [];\r\n    const tagBox = createElement('div', 'tags__box');\r\n    const tagList = createElement('ul', 'tags__items');\r\n    const tagSearch = createElement('input', 'tags__search');\r\n    tagSearch.type = 'text';\r\n    tagSearch.placeholder = 'Поиск по названию';\r\n    const list = getTagList();\r\n\r\n    let tagCount = 0;\r\n    list.forEach(tag => {\r\n        \r\n        const temp = createElement('li', 'tag');\r\n        temp.setAttribute('data-value', tag);\r\n        temp.setAttribute('data-id', tagCount);\r\n        const name = createElement('span', 'tag__text');\r\n        name.innerText = tag;\r\n        temp.append(name);\r\n        tagList.append(temp);\r\n\r\n        temp.addEventListener('click', () => {\r\n            if ((!temp.classList.contains('checked')) && (targetTags.length <= 2)) {\r\n                targetTags.push(\r\n                    {\r\n                        id : temp.dataset.id,\r\n                        value: temp.dataset.value\r\n                    }\r\n                );\r\n                temp.classList.add('checked');\r\n                let tagsArray = targetTags;\r\n                getCheckedTags(tagsArray);\r\n                getCurrentTags();\r\n            }\r\n            \r\n        })\r\n\r\n        tagCount++;\r\n    });\r\n\r\n    function getCurrentTags() {\r\n        return targetTags;\r\n    }\r\n\r\n    function resetTag(id) {\r\n        const items = document.querySelectorAll('.tag');\r\n        \r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].dataset.id === id) {\r\n                items[i].classList.remove('checked');\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCheckedTags(tagsArray) {\r\n        checkedList.innerHTML = '';\r\n        tagsArray.forEach(tag => {\r\n            const {id, value} = tag;\r\n            const item = createElement('li', 'checked-tag');\r\n            const name = createElement('span');\r\n            name.innerText = value;\r\n            const removeBtn = createElement('div', 'checked-tag__remove');\r\n            removeBtn.insertAdjacentHTML('beforeend', `<svg width=\"15\" height=\"14\" viewBox=\"0 0 15 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M1.63603 12.364L12.9497 1.05024\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n            <path d=\"M2 1L13.3137 12.3137\" stroke=\"#272727\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n            </svg>\r\n            `)\r\n            removeBtn.addEventListener('click', (event) => removeCheckedTag(event));\r\n            item.append(name, removeBtn);\r\n            item.setAttribute('data-value', value);\r\n            item.setAttribute('data-id', id);\r\n\r\n            checkedList.append(item);\r\n        })\r\n        \r\n    }\r\n\r\n    function removeCheckedTag(event) {\r\n        const currentTag = event.target.closest('li');\r\n        const currentId = currentTag.dataset.id;\r\n\r\n        for (let i = 0; i < targetTags.length; i++) {\r\n            if (targetTags[i].id === currentId) {\r\n                targetTags.splice(i , 1);\r\n                let tagsArray = targetTags;\r\n                getCheckedTags(tagsArray);\r\n                resetTag(currentId);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function listIsEmpty() {\r\n        if (tagList.innerHTML == '') {\r\n            const tagListMessage = createElement('span');\r\n            tagListMessage.innerText = 'Такого тэга не найдено';\r\n            tagList.append(tagListMessage);\r\n        }\r\n    }\r\n\r\n    selectBtn.append(textBtn, arrowBtn);\r\n    tagBox.append(tagSearch, tagList)\r\n\r\n    tagsLabel.append(selectBtn, tagBox, checkedList);\r\n\r\n    tagSearch.addEventListener('input', () => {\r\n        const tags = document.querySelectorAll('.tag');\r\n        let { value } = tagSearch;\r\n        \r\n        for (let i = 0; i < tags.length; i++) {\r\n            if (!tags[i].dataset.value.includes(value)) {\r\n                tags[i].classList.add('hidden');\r\n            } else {\r\n                tags[i].classList.remove('hidden');\r\n            }\r\n        }\r\n\r\n        listIsEmpty();\r\n    });\r\n\r\n    selectBtn.addEventListener('click', () => {\r\n        selectBtn.classList.toggle('open');\r\n    });\r\n\r\n    document.addEventListener('click', (event) => {\r\n        const selectBtn = document.querySelector('.select-btn');\r\n        const tagsLabel = document.querySelector('.tags__label');\r\n        \r\n        if (selectBtn && !selectBtn.contains(event.target) && !tagsLabel.contains(event.target)) {\r\n            selectBtn.classList.remove('open');\r\n        }\r\n    });\r\n\r\n    return {tagsLabel, targetTags, getCurrentTags, getCheckedTags};\r\n}\r\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","parcelHelpers","defineInteropFlag","export","getHomePage","_element","_itemsList","_tagsLabel","_main","page","createElement","title","innerText","list","getItemsList","filterBox","labelInput","filterInput","type","placeholder","inputSubmit","inputSVG","insertAdjacentHTML","labelCategory","dateBtn","dateBtnSvg","dateBtnSpan","likeBtn","likeBtnSvg","likeBtnSpan","relevationBtn","relevationBtnSvg","relevationBtnSpan","getTagsLabel","tagsSearch","append","categoriesBtn","convertDateStrToStandardFormat","dateStr","parts","split","dateParts","timeParts","join","push","forEach","btn","addEventListener","otherBtn","classList","remove","add","value","inputValue","toLowerCase","targetArray","getArrayOfItems","filter","item","includes","renderItems","sortedArray","slice","sort","a","b","likes","Date","date","tagsLabel","selectBtn","textBtn","checkedList","arrowBtn","targetTags","tagBox","tagList","tagSearch","getTagList","tagCount","getCheckedTags","tagsArray","innerHTML","tag","removeBtn","event","removeCheckedTag","currentId","currentTag","target","closest","dataset","splice","resetTag","items","document","querySelectorAll","setAttribute","temp","contains","tags","listIsEmpty","tagListMessage","toggle","querySelector","getCurrentTags"],"version":3,"file":"home.37c590df.js.map"}